"""
    NeuralFoil <: Method

In general usage, this struct is generated by calling the NeuralFoil constructor.

# Fields:
- `Re::Float`
- `Ma::Float`
- `n_crit::Float'
- `xtr_upper::Float'
- `xtr_lower::Float'
- `net_cache::NeuralFoil.NetParameters`
"""
struct NeuralFoil{TMa,Tn,TNc,TRe,Txl,Txu} <: Method
    Re::TRe
    Ma::TMa
    n_crit::Tn
    xtr_upper::Txu
    xtr_lower::Txl
    net_cache::TNc
end

"""
    NeuralFoil(
        reynolds=1e6, mach=0.0; model_size="xlarge", n_crit=9.0, xtr_upper=1.0, xtr_lower=1.0
    )

    Constructor for NeuralFoil type.

# Default Arguments
- `reynolds::Float=1e6` : Reynolds number
- `mach::Float=0.0` : Mach number

# Keyword Arguments
- `model_size::String="xlarge"` : model size from NeuralFoil
- `n_crit::Float=9.0` : n_crit for Xfoil
- `xtr_upperFloat=1.0` : Xtr_Upper for Xfoil
- `xtr_lowerFloat=1.0` : Xtr_Lower for Xfoil

# Returns
- `method::NeuralFoil` : NeuralFoil method object

# NeuralFoil Method Fields:
- `Re::Vector{Float}` : Reynolds Number(s)
- `Ma::Float=0.0` : Mach Number
- `n_crit::Float=9.0' : n for e^n transition model
- `xtr_upper::Float=1.0' : location for forced trip to turbulent, upper side
- `xtr_lower::Float=1.0' : location for forced trip to turbulent, lower side
- `net_cache::NeuralFoil.NetParameters` : NeuralFoil network parameters based on model size
"""
function NeuralFoil(
    reynolds=1e6, mach=0.0; model_size="xlarge", n_crit=9.0, xtr_upper=1.0, xtr_lower=1.0
)
    return NeuralFoil(
        reynolds,
        mach,
        n_crit,
        xtr_upper,
        xtr_lower,
        nf.NetParameters(; model_size=model_size),
    )
end

"""
    analyze_nf(coordinates, flow_angles; method=NeuralFoil())

Analysis function for NeuralFoil.

# Arguments
- `coordinates::Matrix{Float}` : [x y] coordinates
- `flow_angles::Vector{Float}` : angles of attack at which to analyze

# Keyword Arguments
- `method::NeuralFoil` : A NeuralFoil method object.

# Returns
- `outputs::NeuralFoil.NeuralOutputs` : a NeuralFoil.jl outputs object with fields:
  - `analysis_confidence::Vector` : confidence factor reported by NeuralFoil
  - `cl::Vector` : lift coefficients
  - `cd::Vector` : drag coefficients
  - `cm::Vector` : moment coefficients
  - `top_xtr::Vector` : laminar to turbulent transition location of top surface
  - `bot_xtr::Vector` : laminar to turbulent transition location of bottom surface
  - `upper_bl_ue_over_vinf::Matrix` : upper boundary layer normalized surface velocity
  - `upper_theta::Matrix` : upper boundary layer momentum thickness
  - `upper_H::Matrix` : upper boundary layer shape factor
  - `lower_bl_ue_over_vinf::Matrix` : lower boundary layer normalized surface velocity
  - `lower_theta::Matrix` : lower boundary layer momentum thickness
  - `lower_H::Matrix` : lower boundary layer shape factor
"""
function analyze_nf(coordinates, flow_angles; method=NeuralFoil())

    # - Run NeuralFoil - #
    outputs = nf.get_aero_from_coordinates(
        reverse(coordinates; dims=1),
        flow_angles,
        method.Re;
        n_crit=method.n_crit,
        xtr_upper=method.xtr_upper,
        xtr_lower=method.xtr_lower,
        net_cache=method.net_cache,
    )

    # - Apply Mach Corrections - #
    if !iszero(method.Ma)
        # Laitone Compressibility correction
        outputs.cl .= laitone_compressibility_correction.(outputs.cl, method.Ma)
        outputs.cm .= laitone_compressibility_correction.(outputs.cm, method.Ma)
    end

    # - Return Outputs - #
    return outputs
end
