var documenterSearchIndex = {"docs":
[{"location":"FLOWFoil/api/#API-Index","page":"API Index","title":"API Index","text":"","category":"section"},{"location":"FLOWFoil/api/","page":"API Index","title":"API Index","text":"Modules = [FLOWFoil]","category":"page"},{"location":"AirfoilTools/parameterizations/#Airfoil-Generation","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/#Parameter-Types","page":"Airfoil Generation","title":"Parameter Types","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Most of the parameterizations below have associated composite types whose fields are the parameters used in defining the airfoil geometries.  Each of these composite types is defined using the @kwdef macro such that the user does not need to remember the order of the fields, but can simply define the fields as though they were keyword arguments. In general, few of the fields are given defaults with the exception of things like trailing edge gap or y-positions, which are always defaulted to zero. In addition, some parameterization methods have specific values inherent to their methods. These are exposed to the user for convenience, but are also defaulted to the values inherent in the parameterization method.","category":"page"},{"location":"AirfoilTools/parameterizations/#Coordinates","page":"Airfoil Generation","title":"Coordinates","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"All coordinates are given clockwise from the trailing edge, even if the coordinates are split between upper and lower sides.  In other words, the coordinates are given from the lower trailing edge to the leading edge, then the leading edge back to the upper side trailing edge.  In general, if the coordinates are given in an upper and lower split, the leading edge point is repeated. Note that all coordinates are given with x being in the chord-wise direction and y being orthogonal to x (just like a standard Cartesian x,y plot). Airfoil geometries are all given normalized to the chord length, so the x values will generally have the leading edge at x=0 and the trailing edge at x=1, though there may be some slight variation depending on camber and trailing edge gap.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#NACA-Parameterizations","page":"Airfoil Generation","title":"NACA Parameterizations","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/#NACA-4-series","page":"Airfoil Generation","title":"NACA 4-series","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We begin with the standard NACA 4-series airfoil defined by maximum camber, position of maximum camber, and maximum thickness.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nparameters = NACA4(;\n    maximum_camber=2.0,\n    maximum_camber_position=4.0,\n    maximum_thickness=12.0,\n    blunt_trailing_edge=false,\n)","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"note: Defaults\nThe NACA4 parameter type is the only one with fully defined defaults, which happen to default to the NACA 2412 airfoil with a sharp trailing edge due to its ubiquity.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We can then determine the x,y coordinates from the parameters.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"\nx, y = naca4(parameters)\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"If you are already familiar with a specific parameterization method, you can also forego defining the parameter object and call the method directly.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"x, y = naca4(2.0, 4.0, 12.0)\n\nplot(\n    x,\n    y;\n    aspectratio=1,\n    xlabel=L\"x\",\n    ylabel=L\"y\",\n    label=\"Direct\",\n    linewidth=4,\n    linestyle=:dash,\n)","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"If you have a set of coordinates, and would like to fit NACA 4-series parameters to them, you can use the determine_naca4 function.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"fit_parameters = determine_naca4(x,y)\n\nx, y = naca4(fit_parameters)\n\nplot!(x, y; label=\"Fit\")","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.NACA4","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.NACA4","text":"NACA4\n\nFields\n\nmaximum_camber::Float=2.0 : maximum camber in % chord\nmaximum_camber_position::Float=4.0 : x-position of maximum camber point in 1/10 chord\nmaximum_thickness::Float=12.0 : maximum thickness in % chord\nblunt_trailing_edge::Bool=false : flag for whether to use the blunt trailing edge NACA 4-series definition or not.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.naca4","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.naca4","text":"naca4(parameters::NACA4; N=161, x=nothing, split=false)\n\nCompute x, y airfoil coordinates for N nodes, based on NACA 4-Series Parameterization.\n\nArguments\n\nparameters::NACA4 : NACA 4-series parameters\n\nKeyword Arguments\n\nN::Int=161 : Total number of coordinates to use.  This values should be odd, but if not, the number of points returned will be N-1.\nx::AbstractArray{Float} : x coordinates (cosine spaced coordinates used by default)\nsplit::Bool=false : Flag wheter to split into upper and lower halves.\n\nReturns\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\nnaca4(c=2.0, p=4.0, t=12.0; N=161, x=nothing, blunt_trailing_edge=false, split=false)\n\nCompute x, y airfoil coordinates for N nodes, based on NACA 4-Series Parameterization.\n\nArguments\n\nc::Float : Maximum camber value (percent of chord)\np::Float : Position along chord (in 10ths of chord) where maximum naca4_camber lies\nt::Float : Maximum thickness of airfoil in percent chord\n\nKeyword Arguments\n\nN::Int : Total number of coordinates to use.  This values should be odd, but if not, the number of points returned will be N-1.\nx::AbstractArray{Float} : x-coordinates (cosine spaced coordinates used by default)\nblunt_trailing_edge::Bool : Flag whether trailing edge is blunt or not\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_naca4","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_naca4","text":"determine_naca4(x,y)\n\nCalculate NACA 4-series parameters based on input x,y coordinates.\n\nArguments\n\nx::AbstractArray{Float} : vector of x coordinates for airfoil\ny::AbstractArray{Float} : vector of y coordinates for airfoil\n\nKeyword Arguments\n\nblunt_trailing_edge::Bool=false : Flag whether trailing edge is blunt or not\n\nReturns\n\nparameters::NACA4 : a parameter object of type NACA4.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#NACA-65-series","page":"Airfoil Generation","title":"NACA 65-series","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The NACA 65-series of airfoils was historically used for various linear cascade experiments done by NACA (see \"NACA Report No 824 Summary of Airfoil Data\" by  Ira H. Abbott, Albert E. Von Doenhoff, and Louis S. Stivers, Jr. ). We have implemented some NACA 65-series parameterizations associated with various NACA experimental studies. In general, the 65-series requires a target lift coefficient, a mean line designation, and a series number.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\n#define design lift coefficient\nclo = 1.0\n\n#define mean line designation\na = 1.0\n\n#define series number\nseries_number = \"3-018\"\n\nx, y = AirfoilTools.naca65(clo, a, series_number)\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"There exists a special scaled case for the NACA 65-010 family of airfoils. This special case only requires the user to input a design lift coefficient. using","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"\n#define design lift coefficient\nclo = 1.0\n\nx, y = AirfoilTools.naca65_scaled(clo)\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.naca65","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.naca65","text":"Assumes x in non-dimensional range [0.0,1.0]\n\nDescription from NACA Research Memorandum L51G31: \"Systematic Two-dimensional Cascade Tests of NACA 65-Series Compressor Blades at Low Speeds:\"\n\nThe 65-series compressor blade family is formed by combining a basic thickness form with cambered mean lines. The basic thickness form used is the NACA 65(216)-010 thickness form with the ordinates increased by 0.0015 times the chordwise stations to provide slightly, increased thickness toward the trailing edge. In the scaled case, it was not derived for 10-percent thickness but was scaled down from the NACA 65,2-016 airfoil. The scaling procedure gives the best results whep it is restricted to maximum thickness changes of a few percent. The NACA 65-010 basic thickness has also been derived. These thickness forms differ slightly but are considered to be interchangeable.\n\nThe basic mean line used is the a=1.0 mean line. The amount of camber is for the design lift coefficient for the isolated airfoil with cl_o of 1.0. Both ordinates and slopes are scaled directly to obtain other cambers. Cambered blade sections are obtained by applying the thickness perpendicular to the mean line at stations laid out along the chord line. In the designation the camber is given by the first number after the dash in tenths of cl_o. For example, the NACA 65-810 and NACA 65-(12)10 blade sections are cambered for cl_o = 0.8 and cl_o = 1.2, respectively.\n\nArguments\n\nclo::TF : Design lift coefficient in tenths of chord. Usually first number after the 2nd dash (ie NACA 65-3-818 would input 0.8 for clo)\na::TF : Mean-line designation, fraction of chord from leading edge over which design load is uniform.\nseries_number::String : digits of the airfoil series family with clo of 0 (ie NACA 65-3-818 would be \"3-010\")\n\nKeyword Arguments\n\nx::Vector{TF} = nothing : input x values if specificing x values manually\nsplit::Boolean = false : if true, then the output will be split between top and bottom coordinates\nextra_blending::Boolean = false : If desired number of points is large (> 300ish) then set to true and it will add some extra blending if desired. Note: This is generally not needed!\n\nReturns\n\nx::Vector{TF} : x coordinates\ny::Vector{TF} : y coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.naca65_scaled","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.naca65_scaled","text":"naca65_scaled(clo; N=161, x=nothing, split=false, extra_blending = false)\n\nSpecific version of naca65 for the NACA 65-010 series which uses special mean line and thickness form coordinates. It scales those coordinates based on the cl_o value.\n\nArguments\n\nclo::TF : Design lift coefficient in tenths of chord. Usually first number after the 2nd dash (ie NACA 65-3-818 would input 0.8 for clo)\n\nKeyword Arguments\n\nx::Vector{TF} = nothing : input x values if specificing x values manually\nsplit::Boolean = false : if true, then the output will be split between top and bottom coordinates\nextra_blending::Boolean = false : If desired number of points is large (> 300ish) then set to true and it will add some extra blending if desired. Note: This is generally not needed!\n\nouptuts\n\nx::Vector{TF} : x coordinates\ny::Vector{TF} : y coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#Conformal-Mapping-Parameterizations","page":"Airfoil Generation","title":"Conformal Mapping Parameterizations","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Conformally mapped airfoils are defined from analytical solutions for flow about a cylinder. Currently we have the Joukowsky conformal mapping implemented, which features a cusped trailing edge.  In development is the Karman-Trefftz conformal mapping, which allows for a non-zero trailing edge angle.","category":"page"},{"location":"AirfoilTools/parameterizations/#Joukowsky","page":"Airfoil Generation","title":"Joukowsky","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The Joukowsky map is based on the center and radius of a circle","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\ncenter = [-0.1; 0.1]\nradius = 1.0\npc = plot(\n    cosd.(0:360) * radius .+ center[1],\n    sind.(0:360) * radius .+ center[2];\n    aspectratio=1,\n    label=\"\",\n    xlabel=L\"\\xi\",\n    ylabel=L\"\\eta\",\n    framestyle=:origin\n)\nscatter!(pc, [center[1]], [center[2]]; color=1, label=\"\")\n\nparameters = Joukowsky(; center, radius)\n\nx, y = joukowsky(parameters; N=161)\n\npaf = plot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")\n\nplot(pc, paf; size=(900, 300))","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Since conformally mapped airfoils are defined from analytic solutions, we can also use those solutions for validation as done in the Additional Examples.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"angle_of_attack = 5.0\n\nsurface_velocity, surface_pressure_coefficient, cl = joukowsky_flow(\n    center, radius, angle_of_attack\n)\n\nplot(\n    x[2:(end - 1)],\n    surface_pressure_coefficient[2:(end - 1)];\n    xlabel=L\"x\",\n    ylabel=L\"c_p\",\n    yflip=true,\n    label=\"\",\n)","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.Joukowsky","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.Joukowsky","text":"Joukowsky\n\nFields\n\ncenter::AbstractArray{Float} : [x y] location of center of circle relative to origin\nradius::Float : radius of circle\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.joukowsky","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.joukowsky","text":"joukowsky(parameters::Joukowsky; N=361, fortest=false, normalize=true, split=false)\n\nJoukowsky airfoil parameterization.\n\nArguments\n\nparameters::Joukowsky : Joukowsky parameters\n\nKeyword Arguments\n\nN::Int=361 : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\nfortest::Bool=false : Flag to output non-coordinate paramters used in 'joukowsky_flow()'\nnormalize::Bool=true : Flag whether to normalize to unit chord and translate the leading edge to zero.\nsplit::Bool=false : Flag wheter to split output into upper and lower surfaces.\n\nReturns\n\nIF split == false\n\nx::AbstractArray{Float} : Array of x coordinates\ny::AbstractArray{Float} : Array of y coordinates\n\nIF split == true\n\nxu::AbstractArray{Float} : Array of upper half of x coordinates\nxl::AbstractArray{Float} : Array of lower half of x coordinates\nyu::AbstractArray{Float} : Array of upper half of y coordinates\nyl::AbstractArray{Float} : Array of lower half of y coordinates\n\n\n\n\n\njoukowsky(center, radius; N=361, fortest=false, normalize=true, split=false)\n\nJoukowsky airfoil parameterization.\n\nArguments\n\ncenter::AbstractArray{Float} : [x y] location of center of circle relative to origin\nradius::Float : radius of circle\n\nKeyword Arguments\n\nN::Int=361 : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\nfortest::Bool=false : Flag to output non-coordinate paramters used in 'joukowsky_flow()'\nnormalize::Bool=true : Flag whether to normalize to unit chord and translate the leading edge to zero.\nsplit::Bool=false : Flag wheter to split output into upper and lower surfaces.\n\nReturns\n\nIF split == false\n\nx::AbstractArray{Float} : Array of x coordinates\ny::AbstractArray{Float} : Array of y coordinates\n\nIF split == true\n\nxu::AbstractArray{Float} : Array of upper half of x coordinates\nxl::AbstractArray{Float} : Array of lower half of x coordinates\nyu::AbstractArray{Float} : Array of upper half of y coordinates\nyl::AbstractArray{Float} : Array of lower half of y coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.joukowsky_flow","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.joukowsky_flow","text":"joukowsky_flow(center, radius, alpha; N=361)\n\nCalculate the analytic surface velocities and pressures as well as lift coefficient for a joukowsky airfoil.\n\nArguments\n\ncenter::AbstractArray{Float} : [x y] location of circle center relative to origin\nradius::Float : Radius of circle\nalpha::Float : Angle of attack in degrees\n\nKeyword Arguments\n\nN::Int=361 : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\n\nReturns\n\nvsurf::AbstractArray{Float} : Magnitude of surface velocities at the nodes\ncpsurf::AbstractArray{Float} : Surface pressures at the nodes\ncl::Float : Lift coefficient\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#Class-Shape-Transformation-(CST)-Paramterizations","page":"Airfoil Generation","title":"Class Shape Transformation (CST) Paramterizations","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/#Standard-Kulfan-CST","page":"Airfoil Generation","title":"Standard Kulfan CST","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We implement the CST parameterization presented by Kulfan, where airfoil shapes are defined based on upper and lower coefficients.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nparameters = CST(;\n    upper_coefficients=[0.2; 0.3; 0.2; 0.2], lower_coefficients=[-0.1; 0.1; 0.0; 0.0]\n)\n\nx, y = cst(parameters)\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"This CST method also has a fitting function.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"x, y = naca4()\nplot(\n    x,\n    y;\n    aspectratio=1,\n    xlabel=L\"x\",\n    ylabel=L\"y\",\n    label=\"Coordinates\",\n    linewidth=4,\n    linestyle=:dash,\n)\n\nfit_parameters = determine_cst(x, y; n_upper_coefficients=4, n_lower_coefficients=4)\n\nx, y = cst(fit_parameters)\nplot!(x, y; label=\"Fit\")","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.CST","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.CST","text":"CST\n\nFields\n\nupper_coefficients::AbstractArray{Float} : Vector of coefficients defining the upper side.\nlower_coefficients::AbstractArray{Float} : Vector of coefficients defining the lower side.\ntrailing_edge_yu::Float=0.0 : y-position of the upper side trailing edge.\ntrailing_edge_yl::Float=0.0 : y-position of the lower side trailing edge.\nN1::Float=0.5 : inherent parameter for round-nosed airfoils.\nN2::Float=1.0 : inherent parameter for sharp trailing edge (with optional blunt trailing edge) airfoils.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.cst","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.cst","text":"cst(\n    parameters::CST;\n    N::Integer=80,\n    x=split_cosine_spacing(N),\n    split=false,\n)\n\nObtain airfoil coordiantes (clockwise from trailing edge) from the class shape transformation (CST) parameterization.\n\nArguments\n\nparameters::CST : CST parameters for airfoil.\n\nKeyword Arguments\n\nN::Integer=80 : number of points to use for each side\nx::AbstractArray{Float}=split_cosine_spacing(N) : x-coordinates to use.\ntrailing_edge_yu::Float=0.0 : upper side trailing edge gap\ntrailing_edge_yl::Float=0.0 : lower side trailing edge gap\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\nsplit::Bool=false : if true, returns upper and lower coordinates separately as xl, xu, yl, yu rather than just x, y.\n\nReturns\n\nIf split == false\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\ncst(\n    upper_coefficients,\n    lower_coefficients;\n    N::Integer=80,\n    x=split_cosine_spacing(N),\n    trailing_edge_yu=0.0,\n    trailing_edge_yl=0.0,\n    N1=0.5,\n    N2=1.0,\n    split=false,\n)\n\nObtain airfoil coordiantes (clockwise from trailing edge) from the class shape transformation (CST) parameterization.\n\nArguments\n\nupper_coefficients::AbstractArray{Float} : Vector of CST coefficients for upper side of airfoil.\nlower_coefficients::AbstractArray{Float} : Vector of CST coefficients for lower side of airfoil.\n\nKeyword Arguments\n\nN::Integer=80 : number of points to use for each side\nx::AbstractArray{Float}=split_cosine_spacing(N) : x-coordinates to use.\ntrailing_edge_yu::Float=0.0 : upper side trailing edge gap\ntrailing_edge_yl::Float=0.0 : lower side trailing edge gap\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\nsplit::Bool=false : if true, returns upper and lower coordinates separately as xl, xu, yl, yu rather than just x, y.\n\nReturns\n\nIf split == false\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_cst","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_cst","text":"determine_cst(\n    x,\n    y;\n    n_upper_coefficients::Integer=8,\n    n_lower_coefficients::Integer=8,\n    trailing_edge_yu=0.0,\n    trailing_edge_yl=0.0,\n    N1=0.5,\n    N2=1.0,\n)\n\nDetermine best-fit CST parameters using a least squares solve.\n\nArguments\n\nx::AbstractArray{Float} : vector of x-coordinates.\ny::AbstractArray{Float} : vector of y-coordinates.\n\nKeyword Arguments\n\nn_upper_coefficients::Integer=8 : number of upper side coefficients to fit\nn_lower_coefficients::Integer=8 : number of lower side coefficients to fit\ntrailing_edge_yu::Float=0.0 : y coordiante of the trailing edge upper surface\ntrailing_edge_yl::Float=0.0 : y coordinate of the trailing edge lower surface\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\n\nReturns\n\nparamters::CST : CST paramters for airfoil.\n\n\n\n\n\ndetermine_cst(\n    xl,\n    xu,\n    yl,\n    yu;\n    n_upper_coefficients::Integer=8,\n    n_lower_coefficients::Integer=8,\n    N1=0.5,\n    N2=1.0,\n)\n\nDetermine best-fit CST parameters for upper and lower sides of airfoil using a least squares solve.\n\nArguments\n\nxl::AbstractArray{Float} : vector of lower side x-coordinates.\nxu::AbstractArray{Float} : vector of upper side x-coordinates.\nyl::AbstractArray{Float} : vector of lower side y-coordinates.\nyu::AbstractArray{Float} : vector of upper side y-coordinates.\n\nKeyword Arguments\n\nn_upper_coefficients::Integer=8 : number of upper side coefficients to fit\nn_lower_coefficients::Integer=8 : number of lower side coefficients to fit\ntrailing_edge_yu::Float=0.0 : y coordiante of the trailing edge upper surface\ntrailing_edge_yl::Float=0.0 : y coordinate of the trailing edge lower surface\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\n\nReturns\n\nparameters::CST : CST paramters for airfoil.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#Circular-Arc-Camber-CST","page":"Airfoil Generation","title":"Circular Arc Camber CST","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We also implement a CST-based circular arc camber line airfoil parameterization that may be useful for axial cascade geometry.  This parameterization comes from \"Aerodynamics of Low Reynolds Number Axial Compressor Sections\" by Maffioli et al., and is defined from a camber, maximum thickness, and position of maximum thickness.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nparameters = CircularArcCST(;\n    maximum_camber=0.05, maximum_thickness_postition = 0.3, maximum_thickness = 0.12\n)\n\nx, y = circular_arc_cst(parameters)\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#Spline-Parameterizations","page":"Airfoil Generation","title":"Spline Parameterizations","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/#Basic-B-Spline","page":"Airfoil Generation","title":"Basic B-Spline","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The basic B-Spline parameterization comes from \"Universal Airfoil Parametrization Using B-Splines\" by Rajnarayan, Ning, and Mehr. It is a cubic B-Spline parameterization based on leading edge radius, trailing edge camber and wedge angle, and optional trailing edge gap distance.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nparameters = BasicBSpline(;\n    leading_edge_radius=0.015, trailing_edge_camber_angle=12.0, wedge_angle=12.0\n)\n\nx, y = basic_bspline(parameters)\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.BasicBSpline","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.BasicBSpline","text":"BasicBSpline\n\nFields\n\nleading_edge_radius::Float : leading edge radius\ntrailing_edge_camber_angle::Float : trailing edge camber angle (angle of chordline from horizontal at trailing edge).\nwedge_angle::Float : Wedge angle (angle between upper and lower surfaces at trailing edge).\ntrailing_edge_gap::Float=0.0 : distance between upper and lower surfaces at trailing edge. A value of zero indicates a sharp trailing edge.\nthird_ctrlpt_position::Float=1.0/3.0 : the position of the third control point.  This is an inherent value in the parameterization and if changed, the other parameters will not behave as they are defined here.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.basic_bspline","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.basic_bspline","text":"basic_bspline(parameters::BasicBSpline; N=160, split=false, return_nurbs=false)\n\nObtain airfoil coordinates from a B-Spline parameterization method.\n\nArguments\n\nparameters::BasicBSpline : BasicBSpline parameters.\n\nKeyword Arguments\n\nN::Integer=160 : number of points to use when defining the airfoil\nsplit::Bool : flag whether to output upper and lower coordinates separately\nreturn_nurbs::Bool : flag whether to output spline knots and control points as well\n\nReturns\n\nif split=false\n\nx::AbstractArray{Float} : x-coordinates from lower TE clockwise to upper TE\ny::AbstractArray{Float} : y-coordinates from lower TE clockwise to upper TE\n\nif split=true\n\nxu::AbstractArray{Float} : array of x-coordinates for the upper half of the airfoil (LE to TE)\nyu::AbstractArray{Float} : array of y-coordinates for the upper half of the airfoil (LE to TE)\nxl::AbstractArray{Float} : array of x-coordinates for the lower half of the airfoil (LE to TE)\nyl::AbstractArray{Float} : array of y-coordinates for the lower half of the airfoil (LE to TE)\n\nif return_nurbs=true, also return:\n\nNURBSu::NURBS.NURBScurve : upper spline object\nNURBSl::NURBS.NURBScurve : lower spline object\n\n\n\n\n\ngbs(leading_edge_radius, trailing_edge_camber_angle, wedge_angle; perturbations=nothing, trailing_edge_gap=0, degree=3, third_ctrlpt_position=1/3, weights=nothing, split=false, return_nurbs=false)\n\nObtain airfoil coordinates from a B-Spline parameterization method.\n\nArguments\n\nleading_edge_radius::Float : Leading Edge Radius\ntrailing_edge_camber_angle::Float : Trailing Edge Camber Angle (degrees)\nwedge_angle::Float : Wedge Angle (degrees)\n\nKeyword Arguments\n\ntrailing_edge_gap::Float=0 : Trailing Edge Gap\nthird_ctrlpt_position::Float=1/3 : The x postion of the third control point.\nsplit::Bool=false : flag whether to output upper and lower coordinates separately\nreturn_nurbs::Bool=false : flag whether to output spline object\n\nReturns\n\nif split=false\n\nx::AbstractArray{Float} : x-coordinates from lower TE clockwise to upper TE\ny::AbstractArray{Float} : y-coordinates from lower TE clockwise to upper TE\n\nif split=true\n\nxu::AbstractArray{Float} : array of x-coordinates for the upper half of the airfoil (LE to TE)\nyu::AbstractArray{Float} : array of y-coordinates for the upper half of the airfoil (LE to TE)\nxl::AbstractArray{Float} : array of x-coordinates for the lower half of the airfoil (LE to TE)\nyl::AbstractArray{Float} : array of y-coordinates for the lower half of the airfoil (LE to TE)\n\nif return_nurbs=true, also return\n\nNURBSu::NURBS.NURBScurve : upper spline object\nNURBSl::NURBS.NURBScurve : lower spline object\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#PARametric-SECtion-(PARSEC)-Parameterizations","page":"Airfoil Generation","title":"PARametric SECtion (PARSEC) Parameterizations","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/#Standard-PARSEC","page":"Airfoil Generation","title":"Standard PARSEC","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We implement the PARSEC method developed by Sobieczky (using this reference). There are 11 parameters in the traditional PARSEC parameterization method. They are as follows:","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Parameter Definition\nr_LE Leading Edge Radius\nx_u Chordwise position of maximum thickness of upper surface\nx_l Chordwise position of maximum thickness of lower surface\ny_u y-coordinate at maximum thickness of upper surface\ny_l y-coordinate at maximum thickness of lower surface\ny_xx_u Second derivative of upper surface curve at point of maximum thickness\ny_xx_l Second derivative of lower surface curve at point of maximum thickness\nalpha_TE Trailing edge angle\nbeta_TE Boat-tail angle\ny_TE y-position of center of trailing edge\nDelta y_TE y-distance between upper and lower surface trailing edge points","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nparameters = PARSEC(;\n    leading_edge_radius=0.015,\n    maximum_thickness_xu=0.33,\n    maximum_thickness_xl=0.20,\n    maximum_thickness_yu=0.08,\n    maximum_thickness_yl=-0.04,\n    curvature_u=-0.63,\n    curvature_l=0.30,\n    trailing_edge_angle=-0.05,\n    boattail_angle=-0.15,\n    trailing_edge_y=0.0,\n    trailing_edge_gap=0.0,\n)\n\nx, y = parsec(parameters)\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The PARSEC method also has a fit functionality implemented.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"x, y = naca4()\nplot(\n    x,\n    y;\n    aspectratio=1,\n    xlabel=L\"x\",\n    ylabel=L\"y\",\n    label=\"Coordinates\",\n    linewidth=4,\n    linestyle=:dash,\n)\n\nfit_parameters = determine_parsec(x, y)\n\nx, y = parsec(fit_parameters)\nplot!(x, y; label=\"Fit\")","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.PARSEC","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.PARSEC","text":"PARSEC\n\nFields\n\nleading_edge_radius::Float : leading edge radius\nmaximum_thickness_xu::Float : x-position of maximum thickness for upper side.\nmaximum_thickness_xl::Float : x-position of maximum thickness for lower side.\nmaximum_thickness_yu::Float : value of maximum thickness (from zero) for upper side.\nmaximum_thickness_yl::Float : value of maximum thickness (from zero) for lower side.\ncurvature_u::Float : curvature at point of maximum thickness on upper side.\ncurvature_l::Float : curvature at point of maximum thickness on lower side.\ntrailing_edge_angle::Float : angle from chordline to horizontal at trailing edge.\nboattail_angle::Float : angle from chordline to upper/lower surfaces (half of wedge angle).\ntrailing_edge_gap::Float=0.0 : total gap distance between upper and lower surfaces at treailing edge.\ntrailing_edge_y::Float=0.0 : y-position of midpoint between upper and lower surfaces at trailing edge.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.parsec","text":"parsec(p::PARSEC; N::Integer=80, split=false)\n\nCalculate the x,y airfoil coordinates for both top and bottom surfaces using standard PARSEC Parameterization method.\n\nUse parsec() for modified PARSEC implementation.\n\nArguments\n\np::PARSEC : PARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_yu : y-coordinate at maximum thickness of upper side\nmaximum_thickness_yl : y-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_angle : trailing edge angle\nboattail_angle : boat-tail angle\ntrailing_edge_gap : y-position of center of trailing edge\ntrailing_edge_y : y-distance between upper and lower surface trailing edge points\n\nKeyword Arguments\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\nparsec(p::AbstractArray{Float}; N::Integer=80, split=false)\n\nCalculate the x,y airfoil coordinates for both top and bottom surfaces using standard PARSEC Parameterization method.\n\nUse parsec() for modified PARSEC implementation.\n\nArguments\n\np::AbstractArray{Float} : PARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_yu : y-coordinate at maximum thickness of upper side\nmaximum_thickness_yl : y-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_angle : trailing edge angle\nboattail_angle : boat-tail angle\ntrailing_edge_gap : y-position of center of trailing edge\ntrailing_edge_y : y-distance between upper and lower surface trailing edge points\n\nKeyword Arguments\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_parsec","text":"determine_parsec(x,y)\n\nUses LsqFit to go from x-y coordinates to standard PARSEC parameters.\n\nArguments\n\nx::AbstractArray{Float} : vector of x coordinates\ny::AbstractArray{Float} : vector of y coordinates\n\nReturns\n\nparameters::PARSEC : an parameter object of type PARSEC\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#Modified-PARSEC","page":"Airfoil Generation","title":"Modified PARSEC","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Also implemented in AirfoilTools is a modified PARSEC parameterization that gives direct control to the trailing edge surfaces of the upper and lower sides. In order to create a more intuitive parameterization, the trailing edge parameters, both position and angles are replaced to be directly the trailing edge positions of the upper and lower surface and trailing edge surface angles.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Original Parameter Modified Parameter New Definition\nalpha_TE theta_TE_u Upper surface trailing edge tangent angle\nbeta_TE theta_TE_l Upper surface trailing edge tangent angle\ny_TE y_TE_u y-coordinate of upper surface trailing edge\nDelta y_TE y_TE_l y-coordinate of lower surface trailing edge","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nparameters = ModifiedPARSEC(;\n    leading_edge_radius=0.015,\n    maximum_thickness_xu=0.33,\n    maximum_thickness_xl=0.20,\n    maximum_thickness_yu=0.08,\n    maximum_thickness_yl=-0.04,\n    curvature_u=-0.63,\n    curvature_l=0.30,\n    trailing_edge_tangent_u=-0.2,\n    trailing_edge_tangent_l=0.1,\n    trailing_edge_yu=0.0,\n    trailing_edge_yl=0.0,\n)\n\nx, y = modified_parsec(parameters)\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The Modified PARSEC method also has a fit functionality implemented.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"x, y = naca4()\nplot(\n    x,\n    y;\n    aspectratio=1,\n    xlabel=L\"x\",\n    ylabel=L\"y\",\n    label=\"Coordinates\",\n    linewidth=4,\n    linestyle=:dash,\n)\n\nfit_parameters = determine_modified_parsec(x, y)\n\nx, y = modified_parsec(fit_parameters)\nplot!(x, y; label=\"Fit\")","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.ModifiedPARSEC","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.ModifiedPARSEC","text":"ModifiedPARSEC\n\nFields\n\nleading_edge_radius::Float : leading edge radius\nmaximum_thickness_xu::Float : x-position of maximum thickness for upper side.\nmaximum_thickness_xl::Float : x-position of maximum thickness for lower side.\nmaximum_thickness_yu::Float : value of maximum thickness (from zero) for upper side.\nmaximum_thickness_yl::Float : value of maximum thickness (from zero) for lower side.\ncurvature_u::Float : curvature at point of maximum thickness on upper side.\ncurvature_l::Float : curvature at point of maximum thickness on lower side.\ntrailing_edge_tangent_u::Float : angle of surface at upper side trailing edge.\ntrailing_edge_tangent_l::Float : angle of surface at lower side trailing edge.\ntrailing_edge_yu::Float=0.0 : y-position of upper side trailing edge.\ntrailing_edge_yl::Float=0.0 : y-position of lower side trailing edge.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.modified_parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.modified_parsec","text":"parsec(p::ModifiedPARSEC; N::Int=80, split=false)\n\nCalculate the x,y airfoil coordinates for both top and bottom surfaces using modified PARSEC Parameterization method.\n\nUse parsec() for standard PARSEC implementation.  This modified version employs direct values for trailing edge position and angles for each surface.\n\nArguments\n\np::ModifiedPARSEC : ModifiedPARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_yu : y-coordinate at maximum thickness of upper side\nmaximum_thickness_yl : y-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_tangent_u : trailing edge tangent angle of upper side\ntrailing_edge_tangent_l : trailing edge tangent angle of lower side\ntrailing_edge_yu : y-position of trailing edge of upper side\ntrailing_edge_yl : y-position of trailing edge of lower side\n\nKeyword Arguments\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\nparsec(p::AbstractArray{Float}; N::Int=80, split=false)\n\nCalculate the x,y airfoil coordinates for both top and bottom surfaces using modified PARSEC Parameterization method.\n\nUse parsec() for standard PARSEC implementation.  This modified version employs direct values for trailing edge position and angles for each surface.\n\nArguments\n\np::AbstractArray{Float} : ModifiedPARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_yu : y-coordinate at maximum thickness of upper side\nmaximum_thickness_yl : y-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_tangent_u : trailing edge tangent angle of upper side\ntrailing_edge_tangent_l : trailing edge tangent angle of lower side\ntrailing_edge_yu : y-position of trailing edge of upper side\ntrailing_edge_yl : y-position of trailing edge of lower side\n\nKeyword Arguments\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\ny::AbstractArray{Float} : Vector of y coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nyl::AbstractArray{Float} : Vector of lower half of y coordinates from trailing edge to leading edge.\nyu::AbstractArray{Float} : Vector of upper half of y coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_modified_parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_modified_parsec","text":"determine_modified_parsec(x,y)\n\nUses LsqFit to go from x-y coordinates to modified ModifiedPARSEC parameters.\n\nArguments\n\nx::AbstractArray{Float} : vector of x coordinates\ny::AbstractArray{Float} : vector of y coordinates\n\nReturns\n\nparameters::ModifiedPARSEC : an parameter object of type ModifiedPARSEC\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#Contributing","page":"Airfoil Generation","title":"Contributing","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We welcome the addition of other common parameterizations, as well as improvements/additions to currently implemented options. Additions should have outputs consistent with current parameterizations.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"FLOWFoil includes various panel method implementations that are available based on the method keyword argument. The analyze function is the way to run analyses with any method available in FLOWFoil, you just need to select the method you want and provide any additionally required inputs.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.analyze","page":"Tutorials","title":"FLOWFoil.analyze","text":"analyze(coordinates, flow_angles=0.0; method::Method=Mfoil())\nanalyze(x, y, flow_angles=0.0; method::Method=Mfoil())\n\nConvenience function for setting up, solving, and post-processing airfoils and airfoil systems.\n\nArguments\n\ncoordinates::NTuple{Matrix{Float}} : Tuple of [x y] matrices of airfoil coordinates (may be a single matrix as well)\nflow_angles::Vector{Float} : Vector of angles of attack in degrees (may be a single float as well)\n\nOR\n\nx::Vector{Float} : Vector of x-coordinates of airfoil geometry\ny::Vector{Float} : Vector of y-coordinates of airfoil geometry\nflow_angles::Vector{Float} : Vector of angles of attack in degrees (may be a single float as well)\n\nNote that inputting separate vectors for airfoil coordinates is only available for analysis of single airfoils/bodies.  Multi-airfoil/body systems require the use of a tuple of matrices for coordinate inputs.\n\nKeyword Arguments\n\nmethod::MethodType : desired method for solving\n\nReturns\n\noutputs::OutputType : outputs object (note that only inviscid methods are currently implemented)\n\n\n\n\n\n","category":"function"},{"location":"FLOWFoil/additional_tutorials/#Mfoil-(inviscid)-Method","page":"Tutorials","title":"Mfoil (inviscid) Method","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"An Xfoil-like method, actually based on mfoil can be accessed using the Mfoil method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"Note that we have also set Xfoil=Mfoil so you can also use the Xfoil method type with identical results. Currently, this method only includes the inviscid methods of Xfoil/Mfoil.","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"using FLOWFoil\n\nx, y = AirfoilTools.naca4()\n\nangles_of_attack = range(-5.0, 15.0; step=1)\n\n# viscous solver not yet implemented\nmethod = Mfoil(viscous=false)\n\noutputs = analyze(x, y, angles_of_attack; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"Currently, the Mfoil method outputs are of type InviscidOutputs.  This is also the default method used in the Quick Start.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.Mfoil","page":"Tutorials","title":"FLOWFoil.Mfoil","text":"Mfoil <: Method\n\nFields\n\nviscous::Bool : Flag whether to run an inviscid (false) or viscous (true) analysis.\n\nNOTE: viscous method not yet implemented.\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/#Lewis'-Method-for-Axisymmetric-Bodies","page":"Tutorials","title":"Lewis' Method for Axisymmetric Bodies","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"An axisymmetric method based on the one described by Lewis can be accessed using the Lewis method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"using FLOWFoil\n\n# Since this is an axisymmetric method, we'll use r instead of y\nx, r = AirfoilTools.naca4()\n\n# give the duct some diameter so it doesn't have negative radial dimensions (see warning below)\nr .+= 1.0\n\n# indicate that the body is not a body of revolution (i.e. a duct)\nmethod = Lewis(; body_of_revolution=false)\n\n# note: we need to input an an angle of attack, even though it is unused in this method.\noutputs = analyze(x, r, 0.0; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"The comments here mention multiple bodies, for more information, see the multi-body example: Axisymmetric Mutli-element Systems on the next page.","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"The outputs for the Lewis method are also of type InviscidOutputs.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.Lewis","page":"Tutorials","title":"FLOWFoil.Lewis","text":"Lewis <: Method\n\nFields\n\nbody_of_revolution::AbstractVector{Bool} : Flag(s) whether bodies are bodies of revolutions or not (false indicates an annular airfoil)\n\nNote that if multiple bodies are used, the annular airfoil should come before the body of revolution.\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"warning: Warning\nNo part of the geometry for an axisymmetric body can reside below z=0, otherwise an error will be thrown.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#Martensen's-Method-for-Axial-Cascades","page":"Tutorials","title":"Martensen's Method for Axial Cascades","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"A periodic method for cascade analysis based on that developed by Martensen can be accessed using the Martensen method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"using FLOWFoil\n\nx, y = AirfoilTools.naca4()\n\nangles_of_attack = range(-5.0, 15.0; step=1)\n\n# The cascade method requires solidity (closeness) of sections and stagger (inflow angle - angle of attack)\nmethod = Martensen(solidity=1.2, stagger=15.0)\n\noutputs = analyze(x, y, angles_of_attack; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"The InviscidOutputs type is also used for the Martensen method.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.Martensen","page":"Tutorials","title":"FLOWFoil.Martensen","text":"Martensen <: Method\n\nFields\n\ncascade::Bool=true : flag to apply cascade treatment or not\nsolidity::Float=0.0 : Ratio between airfoil chord length and pitch. Airfoil pitch is simply the distance between chordlines in the cascade.\nstagger::Float=0.0 : Angle (in degrees) from axis of rotation to airfoil chordline. Note that stagger is equivalent to the inflow angle minus the angle of attack.\ntransition_value::Float=Inf : pitch to chord ratio at which we stop applying cascade effects (Lewis uses 30 in his implementation)\ncurvature_correction::Bool=false : flag to apply curvature correction from Lewis\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"note: Note\nIf the cascade option is set to false, this method becomes a standard planar airfoil method, but uses constant vortices, so the Mfoil/Xfoil method is the superior method in that case.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#NeuralFoil-Method","page":"Tutorials","title":"NeuralFoil Method","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"NeuralFoil is a multi-layer perceptron model of Xfoil. We provide the Neuralfoil Method through the NeuralFoil method type and is accessed through the NeuralFoil.jl package:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"using FLOWFoil\n\nx, y = AirfoilTools.naca4()\n\nangles_of_attack = range(-5.0, 15.0; step=1)\n\nreynolds = 2e6\nmach = 0.0\n\nmethod = NeuralFoil(reynolds, mach; model_size=\"xlarge\", n_crit=9.0, xtr_upper=1.0, xtr_lower=1.0)\n\noutputs = analyze([x y], angles_of_attack; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.NeuralFoil","page":"Tutorials","title":"FLOWFoil.NeuralFoil","text":"NeuralFoil <: Method\n\nIn general usage, this struct is generated by calling the NeuralFoil constructor.\n\nFields:\n\nRe::Float\nMa::Float\nn_crit::Float\nxtr_upper::Float\nxtr_lower::Float\nnet_cache::NeuralFoil.NetParameters\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.NeuralFoil-Tuple{Any}","page":"Tutorials","title":"FLOWFoil.NeuralFoil","text":"NeuralFoil(\n    reynolds=1e6, mach=0.0; model_size=\"xlarge\", n_crit=9.0, xtr_upper=1.0, xtr_lower=1.0\n)\n\nConstructor for NeuralFoil type.\n\nDefault Arguments\n\nreynolds::Float=1e6 : Reynolds number\nmach::Float=0.0 : Mach number\n\nKeyword Arguments\n\nmodel_size::String=\"xlarge\" : model size from NeuralFoil choose from:\n\"xxsmall\"\n\"xsmall\"\n\"small\"\n\"medium\"\n\"large\"\n\"xlarge\"\n\"xxlarge\"\n\"xxxlarge\"\nn_crit::Float=9.0 : n_crit for Xfoil\nxtr_upperFloat=1.0 : Xtr_Upper for Xfoil\nxtr_lowerFloat=1.0 : Xtr_Lower for Xfoil\n\nReturns\n\nmethod::NeuralFoil : NeuralFoil method object\n\nNeuralFoil Method Fields:\n\nRe::Vector{Float} : Reynolds Number(s)\nMa::Float=0.0 : Mach Number\n`n_crit::Float=9.0' : n for e^n transition model\n`xtr_upper::Float=1.0' : location for forced trip to turbulent, upper side\n`xtr_lower::Float=1.0' : location for forced trip to turbulent, lower side\nnet_cache::NeuralFoil.NetParameters : NeuralFoil network parameters based on model size\n\n\n\n\n\n","category":"method"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"Note that the NeuralFoil method does not allow multi-body analysis like the other methods do as it is based specifically on Xfoil.  We also return a separate output type for the NeuralFoil method from the NeuralFoil.jl namespace.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#LegacyXfoil-Method","page":"Tutorials","title":"LegacyXfoil Method","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"We also have the LegacyXfoil method that is based on Xfoil and can be accessed with the LegacyXfoil method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"using FLOWFoil\n\nx, y = AirfoilTools.naca4()\n\nangles_of_attack = range(-5.0, 15.0; step=1)\n\nreynolds = 2e6\n\nmethod = LegacyXfoil(reynolds; npan=140)\n\noutputs = analyze([x y], angles_of_attack; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.LegacyXfoil","page":"Tutorials","title":"FLOWFoil.LegacyXfoil","text":"LegacyXfoil <: Method\n\nIn general usage, this struct is generated by calling the LegacyXfoil constructor.\n\nFields\n\nreynolds: Reynolds number\nmach: Mach number\nxtrip: forced transition x/c locations on top/bottom sides\nreinit: reinitialize the solution? (rather than use the previous solution)\niter: Maximum iterations for viscous analyses\nnpan: Number of panels\npercussive_maintenance: Call do_percussive_maintenance upon  convergence failure?\nprintdata: Print data obtained from XFOIL during the solution?\nzeroinit: Start angle of attack sweeps from zero?  If true, results will be sorted by ascending angle of attack.\nclmaxstop: Stop if lift coefficient decreases twice consecutively going up?\nclminstop: Stop if lift coefficient increases twice consecutively going down?\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.LegacyXfoil-Tuple{Any}","page":"Tutorials","title":"FLOWFoil.LegacyXfoil","text":"LegacyXfoil(\n    reynolds,\n    mach=0.0;\n    xtrip=(1.0, 1.0),\n    reinit=false,\n    iter=50,\n    npan=140,\n    percussive_maintenance=!reinit,\n    printdata=false,\n    zeroinit=true,\n    clmaxstop=false,\n    clminstop=false,\n)\n\nConstructor for LegacyXfoil type.\n\nArguments\n\nreynolds::Float=1e6 : Reynolds number\n\nDefault Arguments\n\nmach::Float=0.0 : Mach number\n\nKeyword Arguments\n\nxtrip::Tuple{Float, Float}=(1.0,1.0): forced transition x/c locations on top/bottom sides\nreinit::Bool=false: reinitialize the solution? (rather than use the previous solution)\niter::Int=50: Maximum iterations for viscous analyses\nnpan::Int=140: Number of panels\npercussive_maintenance::Bool=!reinit: Call do_percussive_maintenance upon convergence failure?\nprintdata::Bool=false: Print data obtained from XFOIL during the solution?\nzeroinit::Bool=true: Start angle of attack sweeps from zero?  If true, results will be sorted by ascending angle of attack.\nclmaxstop::Bool=false: Stop if lift coefficient decreases twice consecutively going up?\nclminstop::Bool=false: Stop if lift coefficient increases twice consecutively going down?\n\nReturns\n\nmethod::LegacyXfoil : LegacyXfoil method object\n\n\n\n\n\n","category":"method"},{"location":"FLOWFoil/additional_tutorials/","page":"Tutorials","title":"Tutorials","text":"Note that we return a separate output type for the LegacyXFoil method:","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.LegacyXFOutputs","page":"Tutorials","title":"FLOWFoil.LegacyXFOutputs","text":"LegacyXFOutputs\n\nFields\n\ncl::Vector{Float}\ncd::Vector{Float}\ncdp::Vector{Float}\ncm::Vector{Float}\nconverged::Vector{Bool}\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/api/#API-Index","page":"API Index","title":"API Index","text":"","category":"section"},{"location":"AirfoilTools/api/","page":"API Index","title":"API Index","text":"Modules = [AirfoilTools]\nOrder = [:type,:function]","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#Airfoil-Geometry-Manipulation-Tools","page":"Airfoil Manipulation","title":"Airfoil Geometry Manipulation Tools","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"Here we include the variety of methods for manipulating airfoil geometries in useful ways implemented in AirfoilTools.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#Deconstruction","page":"Airfoil Manipulation","title":"Deconstruction","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"It is often convenient to deconstruct an airfoil into its upper and lower halves.  The split_upper_lower function makes this process straightforward.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nx, y = naca4()\n\nxl, xu, yl, yu = split_upper_lower(x, y)\n\nplot(xl, yl; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Lower Side\")\nplot!(xu, yu; label=\"Upper Side\")","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.split_upper_lower","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.split_upper_lower","text":"split_upper_lower(x, y; idx::Integer=nothing)\n\nSplit the upper and lower halves of the airfoil coordinates.\n\nAssumes leading edge point is at first minimum x value if idx is not provided. Returns the upper and lower coordinates each with the leading edge point. Assumes airfoil is defined clockwise starting at the trailing edge.\n\nArguments\n\nx::AbstractArray{Float} : Vector of x coordinates\ny::AbstractArray{Float} : Vector of y coordinates\n\nKeyword Arguments\n\nidx::Integer : optional index at which to split the coordinates\n\nReturns\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates\nxu::AbstractArray{Float} : Vector of upper half of x coordinates\nyl::AbstractArray{Float} : Vector of lower half of y coordinates\nyu::AbstractArray{Float} : Vector of upper half of y coordinates\n\n\n\n\n\nsplit_upper_lower(coordaintes; idx::Integer=nothing)\n\nSplit the upper and lower halves of the airfoil coordinates.\n\nAssumes leading edge point is at first minimum x value if idx is not provided. Returns the upper and lower coordinates each with the leading edge point. Assumes airfoil is defined clockwise starting at the trailing edge.\n\nArguments\n\ncoordinates::Matrix{Float} : Matrix of [x y] coordinates\n\nKeyword Arguments\n\nidx::Integer : optional index at which to split the coordinates\n\nReturns\n\nxl::AbstractArray{Float} : View of lower half of x coordinates\nxu::AbstractArray{Float} : View of upper half of x coordinates\nyl::AbstractArray{Float} : View of lower half of y coordinates\nyu::AbstractArray{Float} : View of upper half of y coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Translation","page":"Airfoil Manipulation","title":"Translation","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"There are various transformation functions that can also be helpful in various situations.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"We can flip an airfoil.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nx, y = naca4()\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Nominal\")\nplot!(flip!(copy(x)), y; label=\"x Flipped\")","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"note: Note\nNote that this function both flips and translates. It's primarily useful for flipping the x coordinates.  If you want to flip the y coordinate, applying a simple negative would be best","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"plot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Nominal\")\nplot!(x, flip!(copy(y)); label=\"y Flipped\")\nplot!(x, -y; label=\"y Negated\")","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"Another thing we could do is translate the airfoil so that the trailing edge is at y=0.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nx, y = naca4()\ny .+= 0.2\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Nominal\")\n\nxy = [x y]\nzero_y_te!(xy)\nplot!(xy[:,1], xy[:,2]; label=\"TE zeroed\")","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"note: Note\nThis only vertically translates the geometry, it does not rotate things to put the leading edge on the axis as well if the geometry is rotated.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.zero_y_te!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.zero_y_te!","text":"zero_y_te!(coordinates)\n\nPlaces trailing edge on the x-axis.\n\nArguments\n\ncoordinates::Array{Float} : Array of [x y] coordinates to be updated in place.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Rotation","page":"Airfoil Manipulation","title":"Rotation","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"We can also rotate airfoils about arbitrary points.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nx, y = naca4()\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Nominal\")\n\nxy = [x y]\nangle = 10.0 # degrees\n\n# rotate by angle about default point: (0,0)\nrotate_coordinates!(xy, angle)\n\nplot!(xy[:,1], xy[:,2], label=\"rotated about (0,0)\")\n\n# rotate again but about the trailing edge\nxy2 = [x y]\nrotate_coordinates!(xy2, angle; rotation_point=[1.0,0.0])\n\nplot!(xy2[:,1], xy2[:,2], label=\"rotated about (1,0)\")","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.rotate_coordinates!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.rotate_coordinates!","text":"rotate_coordinates!(coordinates, angle; rotation_point=[0.0; 0.0])\n\nRotate coordinates clockwise about rotation_point by angle in degrees.\n\nArguments\n\ncoordinates::Array{Float} : Array of [x y] coordinates to be updated in place.\nangle::Float=0.0 : Angles, in degrees, by which to rotate the coordinates clockwise (positive angle will pitch airfoil up).\n\nKeyword Arguments\n\nrotation_point::AbstractArray{Float}=[0.0; 0.0] : Array of [x y] position of point about which to perform rotation.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Normalization","page":"Airfoil Manipulation","title":"Normalization","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"It can also be convenient to normalize coordinates to have a chord length of one.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nx, y = 2.0.*naca4()\n\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Nominal\")\n\nnormalize_coordinates!(x, y)\n\nplot!(x, y; label=\"Normalized\")","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"note: Note\nThis function is designed to go from a nominal airfoil (length 1, leading edge and trailing edges on the axis, etc.) to something else.  The operations are in the order: scale, rotate, then translate.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.normalize_coordinates!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.normalize_coordinates!","text":"normalize_coordinates!(coordinates)\n\nNormalize airfoil to unit chord and shift leading edge to zero. Adjusts coordinates in place.\n\nArguments\n\ncoordinates::AbstractArray{Float} : Array of [x y] coordinates\n\n\n\n\n\nnormalize_coordinates!(x, y)\n\nNormalize airfoil to unit chord and shift leading edge to zero. Adjusts coordinates in place.\n\nArguments\n\nx::Array{Float} : Array of x coordinates\ny::Array{Float} : Array of y coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Scale,-Rotate,-and-Translate","page":"Airfoil Manipulation","title":"Scale, Rotate, and Translate","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"Sometimes, we might want do several operations together, which we can with the position_coordinates! function.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nx, y = naca4()\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Unscaled\")\n\nxy = [x y]\nposition_coordinates!(\n    xy; scale=0.8, angle=3.0, location=[-0.2; 0.1], rotation_point=[0.0; 0.0], flipped=true\n)\n\nplot!(xy[:, 1], xy[:, 2]; label=\"Re-positioned\")","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.position_coordinates!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.position_coordinates!","text":"position_coordinates!(coordinates, scale, angle, location)\n\nScale, Rotate, and Transform (in that order) airfoil coordinates.\n\nArguments\n\ncoordinates::Array{Float} : Array of [x y] coordinates to be updated in place.\n\nKeyword Arguments\n\nscale::Float=1.0 : Value by which to scale coordinates.\nangle::Float=0.0 : Angles, in degrees, by which to rotate the coordinates clockwise (positive angle will pitch airfoil up).\nlocation::AbstractArray{Float}=[0.0; 0.0] : Array of [x y] position of leading edge location.\nrotation_point::AbstractArray{Float}=[0.0; 0.0] : Array of [x y] position of point about which to perform rotation.\nflipped::Bool : flag whether to flip airfoil upside down.\n\nReturns\n\nx::Array{Float} : array of x-coordinates\ny::Array{Float} : array of y-coordinates\n\n\n\n\n\nposition_coordinates!(\n    coordinates::Vector{AbstractArray{TF}};\n    scales=[1.0],\n    angles=[0.0],\n    locations=[[0.0; 0.0],],\n    rotation_points=[[0.0; 0.0],],\n    flipped=[false],\n) where {TF}\n\nMulti-airfoil version of position_coordinates!.\n\nIf keyword arguments are give as single valued vectors, the same values are used for all coordinate sets. If keyword arguments are provided as vectors of length greater than 1, they must have the same length as the set of coordinates. For example, if scaling 3 airfoils, there will be a vector of 3 airfoil coordinate sets input and scales must either be a one element vector or a vector of length 3.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Re-definition","page":"Airfoil Manipulation","title":"Re-definition","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"Sometimes, we may want to \"re-panel\" an airfoil, (a good example is the PANE command in Xfoil).  The repanel_airfoil method splines the provided geometry and then resamples it using cosine spacing to give a higher density of coordinates at the leading and trailing edges.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"using FLOWFoil.AirfoilTools\nusing Plots\nusing LaTeXStrings\ninclude(\"../assets/plots_default.jl\") #hide\n\nx, y = naca4(; x = range(0.0,1.0,30))\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"Linear Spaced\", marker=true, markersize=4)\n\nx_rp, y_rp = repanel_airfoil(x,y; N=161)\n\nscatter!(x_rp, y_rp; label=\"Cosine Spaced\", markersize=1.5)","category":"page"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"note: Note\nNote that if you simply have too few coordinates to begin with, repaneling the airfoil isn't going to smooth out an inaccurate leading edge.  In such a case you should consider fitting the geometry with one of the airfoil parameterizazation methods, which will ensure a round leading edge.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.repanel_airfoil","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.repanel_airfoil","text":"repanel_airfoil(x, y; N=160)\n\nRepanels airfoil coordinates using Akima splines with N coordinate points.\n\nArguments\n\nx::AbstractArray{Float} : vector containing the x coordinates of the airfoil\ny::AbstractArray{Float} : vector containing the y coordinates of the airfoil\n\nKeyword Arguements\n\nN::Int : Number of data points to be returned after repaneling. Will only return odd numbers, if N is even, N+1 points will be returned.\n\nReturns\n\nrepaneled_x::AbstractArray{Float} : Repaneled, cosine spaced x corrdinates of the airfoil\nrepaneled_z::AbstractArray{Float} : y coordinates of the repaneled airfoil obtained using an akima spline\n\n\n\n\n\nrepanel_airfoil(coordinates; N=160)\n\nRepanels airfoil coordinates using Akima splines with N coordinate points.\n\nArguments\n\ncoordinates::Array{Float} : Array of [x y] coordinates\n\nKeyword Arguements\n\nN::Int=160 : Number of data points to be returned after repaneling. Will only return odd numbers, if N is even, N+1 points will be returned.\n\nReturns\n\nrepaneled_coordinates::Array{Float} : new coordinate array.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Contributing","page":"Airfoil Manipulation","title":"Contributing","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"We welcome the addition of more convenience functions for airfoil geometry manipulation.","category":"page"},{"location":"AirfoilTools/intro/#Airfoil-Tools","page":"Intro","title":"Airfoil Tools","text":"","category":"section"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"AirfoilTools is a submodule of FLOWFoil containing useful airfoil geometry generation and manipulation routines that are commonly used in the BYU FLOW Lab.","category":"page"},{"location":"AirfoilTools/intro/#Airfoil-Generation","page":"Intro","title":"Airfoil Generation","text":"","category":"section"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"Several common airfoil parameterization methods are implemented in AirfoilTools for generating various airfoil geometries.","category":"page"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"Method Status Fit\nBasic B-Spline ✅ 🚧\nB-Spline with perturbations 🚧 ⭕️\nCST (Kulfan) ✅ ✅\nCST (Circular-arc) ✅ ⭕️\nJoukowsky ✅ ⭕️\nKarman-Trefftz 🚧 ⭕️\nNACA 4-series ✅ ✅\nNACA 65-series ✅ ⭕️\nPARSEC ✅ ✅\nPARSEC (modified) ✅ ✅","category":"page"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"*Fit indicates there is a method implemented to determine parameters from coordinates.","category":"page"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"Key:","category":"page"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"✅ Ready to use\n🚧 Under Development\n⭕️ Needs to be added","category":"page"},{"location":"AirfoilTools/intro/#Airfoil-Geometry-Manipulation","page":"Intro","title":"Airfoil Geometry Manipulation","text":"","category":"section"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"Occasionally, we might want to manipulate airfoil geoemtries for some reason.  We also have methods for the following in the AirfoilTools module:","category":"page"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"split into upper/lower sides\nflip, rotate, translate, and normalize\nre-panel (spline + interpolate)","category":"page"},{"location":"AirfoilTools/intro/#Contribution","page":"Intro","title":"Contribution","text":"","category":"section"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"We welcome additional airfoil parameterization methods as well as convenient geometry manipulation routines that make life easier when working with airfoil analysis and optimization.","category":"page"},{"location":"FLOWFoil/examples/#Additional-Examples","page":"Additional Examples","title":"Additional Examples","text":"","category":"section"},{"location":"FLOWFoil/examples/#Mfoil:-Single-inviscid-airfoil-comparision-to-analytic-solution","page":"Additional Examples","title":"Mfoil: Single inviscid airfoil comparision to analytic solution","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"This example uses the same Joukowsky airfoil presented in the original Xfoil paper. We show here that our derivation and implementation of an Xfoil-like method also matches well to the analytical solution.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\ncenter = [-0.1; 0.1]\nradius = 1.0\nalpha = 4.0\n\n# - Joukowsky Geometry - #\nx, y = FLOWFoil.AirfoilTools.joukowsky(center, radius, N=161)\n\n# Plot Geometry\ninclude(\"../assets/plots_default.jl\") #hide\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"# - Analytic Solution - #\nsurface_velocity, surface_pressure_coefficient, cl = FLOWFoil.AirfoilTools.joukowsky_flow(\n    center, radius, alpha; N=161\n)\n\n# - FLOWFoil Solution - #\noutputs = analyze([x y], alpha; method=Mfoil())\n\n# - Plot Outputs - #\ninclude(\"../assets/plots_default.jl\") #hide\nplot(\n    x[2:(end - 1)],\n    surface_pressure_coefficient[2:(end - 1)];\n    xlabel=L\"x\",\n    ylabel=L\"c_p\",\n    yflip=true,\n    linestyle=:dash,\n    linewidth=4, # hide\n    label=\"Analytic Solution\",\n)\nplot!(x[2:(end - 1)], outputs.cp[2:(end - 1)]; label=\"FLOWFoil\")","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"","category":"page"},{"location":"FLOWFoil/examples/#Axisymmetric-Body-of-Revolution","page":"Additional Examples","title":"Axisymmetric Body of Revolution","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"For this example, we use experimental data of a body of revolution from chapter 4 of \"Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems\" by  R. I. Lewis. Note that for the axisymmetric examples, we will use (z,r) rather than (x,y) to name our coordinates in the common cylindrical frame that ducts and bodies of revolution are defined.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\ndata_path = normpath(\n    joinpath(\n        splitdir(pathof(FLOWFoil))[1], \"..\", \"test\", \"data\", \"bodyofrevolutioncoords.jl\"\n    ),\n)\n# read in center_body_coordinates as well as normalized surface velocities.\ninclude(data_path)\n\n# - Plot Geometry - #\ninclude(\"../assets/plots_default.jl\") #hide\nplot(\n    center_body_coordinates[:, 1],\n    center_body_coordinates[:, 2];\n    aspectratio=1,\n    ylim=(0,Inf),\n    xlabel=L\"z\",\n    ylabel=L\"r\",\n    label=\"\"\n)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"# - FLOWFoil Solution - #\noutputs = analyze(center_body_coordinates, [0.0]; method=Lewis(; body_of_revolution=[true]))\n\n# - Plot Outputs - #\ninclude(\"../assets/plots_default.jl\") #hide\nscatter(\n    Vs_over_Vinf_x,\n    Vs_over_Vinf_vs;\n    label=\"Experimental Data\",\n    markerstrokecolor=1, # hide\n    markercolor=1, # hide\n    markersize=4, # hide\n    xlabel=L\"\\frac{z}{c}\",\n    ylabel=L\"\\frac{V_s}{V_\\infty}\",\n    legend=:bottomright, # hide\n)\nplot!(\n    0.5 * (center_body_coordinates[1:(end - 1), 1] .+ center_body_coordinates[2:end, 1]),\n    outputs.vs;\n    label=\"FLOWFoil\",\n)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"","category":"page"},{"location":"FLOWFoil/examples/#Axisymmetric-Annular-Airfoil-(Duct)","page":"Additional Examples","title":"Axisymmetric Annular Airfoil (Duct)","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"If we define an airfoil shape in an axisymmetric scheme, we model an annular airfoil, or in other words, a duct.  To do so, we follow a similar procedure to bodies of revolution with the exception that we set body_of_revolution=false. The following case comes from the same book as the body of revolution above, but this time for a duct with a NACA 662-015 cross section.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\nduct_path = normpath(\n    joinpath(splitdir(pathof(FLOWFoil))[1], \"..\", \"test\", \"data\", \"naca_662-015.jl\")\n)\ninclude(duct_path)\n\n# - Plot Geometry - #\nplot(\n    duct_coordinates[:, 1],\n    duct_coordinates[:, 2];\n    aspectratio=1,\n    xlabel=L\"z\",\n    ylabel=L\"r\",\n    label=\"\",\n)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"# - FLOWFoil Solution - #\noutputs = analyze(duct_coordinates, [0.0]; method=Lewis(; body_of_revolution=[false]))\n\n# - Plot Outputs - #\ninclude(\"../assets/plots_default.jl\") #hide\nscatter(\n    pressurexupper,\n    pressureupper;\n    markershape=:utriangle,\n    label=\"Experimental Nacelle\",\n    color=1, # hide\n    yflip=true,\n    markerstrokecolor=1, # hide\n    markercolor=1, # hide\n    markersize=4, # hide\n    xlabel=L\"\\frac{z}{c}\",\n    ylabel=L\"c_p\",\n    legend=:bottomright, # hide\n)\nscatter!(\n    pressurexlower,\n    pressurelower;\n    markershape=:dtriangle,\n    label=\"Experimental Casing\",\n    color=1, # hide\n    markerstrokecolor=1, # hide\n    markercolor=1, # hide\n    markersize=4, # hide\n)\nplot!(\n    0.5 * (duct_coordinates[1:(end - 1), 1] .+ duct_coordinates[2:end, 1]),\n    outputs.cp;\n    label=\"FLOWFoil\",\n    color=2, # hide\n)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"As above, we plot experimental results along with our calculated values.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"","category":"page"},{"location":"FLOWFoil/examples/#Axisymmetric-Mutli-element-Systems","page":"Additional Examples","title":"Axisymmetric Mutli-element Systems","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"As an example of an multi-element axisymmetric system (such as that used for a ducted rotor), we will simply combine the two previous cases. Note that we include the coordinates for the various bodies as a tuple of matrices, and in this case, we need to indicate in the Lewis method fields which of the bodies is a body of revolution (currently, the method only works if the annular airfoil comes first). We simply put the previous two cases together to show that a multi-body cases works, and the results are reasonable.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\n# - Plot Geometry - #\nplot(\n    center_body_coordinates[:, 1],\n    center_body_coordinates[:, 2];\n    aspectratio=1,\n    xlabel=L\"z\",\n    ylabel=L\"r\",\n    label=\"Center Body\",\n    legend=:right #hide\n)\nplot!(\n    duct_coordinates[:, 1],\n    duct_coordinates[:, 2];\n    label=\"Duct\",\n)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"outputs = analyze(\n    (duct_coordinates, center_body_coordinates), [0.0];\n    method=Lewis(; body_of_revolution=[false, true]),\n)\n\nscatter(\n    Vs_over_Vinf_x,\n    Vs_over_Vinf_vs;\n    label=\"Experimental Center Body\",\n    markerstrokecolor=1, # hide\n    markercolor=1, # hide\n    markersize=4, # hide\n    xlabel=L\"\\frac{z}{c}\",\n    ylabel=L\"\\frac{V_s}{V_\\infty}\",\n    legend=:bottomright, # hide\n)\nplot!(\n    0.5 * (center_body_coordinates[1:(end - 1), 1] .+ center_body_coordinates[2:end, 1]),\n    outputs.vs[2];\n    label=\"FLOWFoil Center Body with Duct Effects\",\n)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"scatter(\n    pressurexupper,\n    pressureupper;\n    markershape=:utriangle,\n    label=\"Experimental Nacelle\",\n    color=1, #hide\n    yflip=true,\n    markerstrokecolor=1, #hide\n    markercolor=1, #hide\n    markersize=4, #hide\n    xlabel=L\"\\frac{z}{c}\",\n    ylabel=L\"c_p\",\n    legend=:bottomright, #hide\n)\nscatter!(\n    pressurexlower,\n    pressurelower;\n    markershape=:dtriangle,\n    label=\"Experimental Casing\",\n    color=1, #hide\n    markerstrokecolor=1, #hide\n    markercolor=1, #hide\n    markersize=4, #hide\n)\nplot!(\n    0.5 * (duct_coordinates[1:(end - 1), 1] .+ duct_coordinates[2:end, 1]),\n    outputs.cp[1];\n    label=\"FLOWFoil Duct with Center Body Effects\",\n    color=2, #hide\n)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"Plotting the geometry and the output velocities and pressures show expected behavior when combining these two cases.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"","category":"page"},{"location":"FLOWFoil/examples/#Linear-Cascade","page":"Additional Examples","title":"Linear Cascade","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"For this example, we uses data from chapter 2 of \"Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems\" by  R. I. Lewis for a linear cascade section with inflow angle of +/- 35 degrees with zero twist.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\n#this file contains the coordinates of the C4/70C50 airfoil as defined by lewis as well as the values of the pressure coefficient\ndata_path = normpath(\n    joinpath(\n        splitdir(pathof(FLOWFoil))[1], \"..\", \"test\", \"data\", \"chapter2_lewis_validation.jl\"\n    ),\n)\ninclude(data_path)\n\n#previously defined coordinates in chapter2_lewis_validation.jl\ncoordinates = [x y]\n\n# - Plot Geometry - #\ninclude(\"../assets/plots_default.jl\") #hide\nplot(x, y; apsectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"# - Set up remaining inputs - #\n# Define method inputs\nmethod = Martensen(; solidity=1.0 / 0.900364, stagger=0.0)\n\n# define angles of attack\n# in this case the angles of attack = the inflow angles since stagger is 0\nflow_angles = [-35.0, 35.0]\n\n# - FLOWFoil Solution - #\noutputs = analyze(coordinates, flow_angles; method=method)\n\n# Panel midpoints (x has 51 nodes → 50 panels)\nxmid = 0.5 .* (x[1:end-1] .+ x[2:end])\n\n# - Plot Outputs - #\ninclude(\"../assets/plots_default.jl\") #hide\n# Plot cp for alpha = -35 degrees\n\nscatter(\n    x_from_web_plot_digitizer_negative_35_degrees,\n    cp_Lewis_negative_35_degrees;\n    xlabel=L\"\\frac{x}{c}\",\n    ylabel=L\"c_p\",\n    label=\"Lewis: -35°\",\n    markerstrokewidth=0, #hide\n    yflip=true,\n    markersize=4, #hide\n    legend=:topright, #hide\n)\nplot!(xmid, outputs.cp[:, 1]; label=\"FLOWFoil\")","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"# Plot cp for alpha = +35 degrees\n\nscatter(\n    x_from_web_plot_digitizer_positive_35_degrees,\n    cp_Lewis_positive_35_degrees;\n    xlabel=L\"\\frac{x}{c}\",\n    ylabel=L\"c_p\",\n    label=\"Lewis: +35°\",\n    markerstrokewidth=0, #hide\n    yflip=true,\n    markersize=4, #hide\n    legend=:topright, #hide\n)\nplot!(xmid, outputs.cp[:, 2]; label=\"FLOWFoil\")","category":"page"},{"location":"#FLOWFoil.jl-([F]()light,-[L]()earning,-[O]()ptimization,-and-[W]()ind-Air[Foil]()-Analysis)","page":"Home","title":"FLOWFoil.jl (Flight, Learning, Optimization, and Wind AirFoil Analysis)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Build Status) (Image: Code Style: Blue)","category":"page"},{"location":"","page":"Home","title":"Home","text":"FLOWFoil is a collection of two dimensional potential flow solvers (panel methods) for airfoils, airfoil systems, and axisymmetric sections/systems. The following table includes the list of currently available methods (usage can be found in the docs).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Method Xfoil/Mfoil in Julia Lewis Martensen LegacyXfoil NeuralFoil\nDescription A re-derivation of the Mfoil/Xfoil method and implementation in Julia. Currently only the inviscid portions are derived/implemented. An axisymmetric method, useful for ducts and bodies of revolution. A periodic method (with optional planar functionality) for axial cascades. Wrapper of Xfoil.jl Wrapper of NeuralFoil.jl\nPanel Type Linear Vortex (+ Constant Source) Constant Vortex Constant Vortex Linear Vortex + Constant Source N/A\nBoundary Condition Dirichlet Dirichlet Dirichlet Dirichlet N/A\nViscous 🚧 ⭕️ ⭕️ ✅ ✅\nSingle-body Functional ✅ ✅ ✅ ✅ ✅\nMulti-body Functional 🚧 ✅ 🚧 ❌ ❌\nAble to model blunt trailing edges ✅ ⭕️ ⭕️ ✅ ✅\nAD Compatible (ForwardDiff.jl) ✅ ✅ ✅ ❌ ✅\nReferences or Wrapped Packages 1, 2 3 3 Xfoil.jl NeuralFoil.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Key:","category":"page"},{"location":"","page":"Home","title":"Home","text":"✅ Implemented\n🚧 Under Development\n⭕️ Will likely not be implemented\n❌ Cannot be implemented","category":"page"},{"location":"#AirfoilTools","page":"Home","title":"AirfoilTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In conjunction with the analysis functions of FLOWFoil, AirfoilTools provides several convenience functions for generating and manipulating airfoil geometry and polars.","category":"page"},{"location":"#References:","page":"Home","title":"References:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fidkowski, K. J., \"A Coupled Inviscid-Viscous Airfoil Analysis Solver, Revisited,\" AIAA Journal, 2021.\nDrela, M., \"XFOIL: An Analysis and Design System for Low Reynolds Number Airfoils,\" 1989.\nR. I. Lewis, \"Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems,\" 1991","category":"page"},{"location":"FLOWFoil/tutorial/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"Running FLOWFoil can be done simply with a single method: analyze As an introductory example, we will do a quick analysis of a NACA 2412 airfoil, with coordinates from one of the available methods in the Airfoil Tools sub-module.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\n\n# note: 2412 is default for the NACA 4-series implemenation\nx, y = AirfoilTools.naca4()\nnothing #hide","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"Let's plot the geometry.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"# plot geometry\ninclude(\"../assets/plots_default.jl\") #hide\nusing Plots\nusing LaTeXStrings\nplot(x, y; aspectratio=1, xlabel=L\"x\", ylabel=L\"y\", label=\"\")","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"note: Note\nAirfoilTools generates airfoil coordinates in the format required for FLOWFoil: starting at the trailing edge, and proceeding clockwise around the airfoil.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"Let's finalize the required inputs and run the analysis.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"# choose one or more angles of attack\nangles_of_attack = range(-5.0, 15.0, step=1)\n\n# analyze\noutputs = analyze(x, y, angles_of_attack)","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"And then we can plot some outputs, for example, the pressure distribution.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"# plot pressure distribution at the 6th angle of attack.\nplot(x, outputs.cp[:, 6]; xlabel=L\"x\", ylabel=L\"c_p\", yflip=true, label=\"\")","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"Or the lift and drag polars.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"# plot lift\npcl = plot(angles_of_attack, outputs.cl, xlabel=L\"\\alpha\", ylabel=L\"c_\\ell\", label=\"\")\npcd = plot(angles_of_attack, outputs.cd, xlabel=L\"\\alpha\", ylabel=L\"c_d\", label=\"\")\nplot(pcl, pcd; size=(900,300))","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"Output structures depend on the method selected, but in general you'll get lift (cl) and drag (cd) and some other values depending on the method. In this case, we are using the default Xfoil/Mfoil method and the outputs are an InviscidOutputs type, which all of the non-wrapped methods use currently:","category":"page"},{"location":"FLOWFoil/tutorial/#FLOWFoil.InviscidOutputs","page":"Quick Start","title":"FLOWFoil.InviscidOutputs","text":"InviscidOutputs\n\nNote: not all methods return values for all outputs.  Methods will return zeros in such cases.\n\nFields\n\nvs: surface velocities normalized by freestream velocity on each body, nominally a matrix, but becomes a vector of matrices in the multi-body case with dimensions [body][panel,angle]\ncp: pressure coefficient for each panel of each body, becomes a vector of matrices in the multi-body case with dimensions [body][panel,angle]\ncl: lift coefficient of each body, nominally a vector but becomes a matrix in the multi-body case with dimensions angle x body\ncd: Inviscid drag coefficient of each body (simply integral of pressure coefficient in x direction), but becomes a matrix in the multi-body case with dimensions angle x body\ncm: moment coefficient of each body, but becomes a matrix in the multi-body case with dimensions angle x body\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"See Tutorials for the various methods and additional output structure types.","category":"page"}]
}
