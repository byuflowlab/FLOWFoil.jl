var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FLOWFoil","category":"page"},{"location":"#FLOWFoil","page":"Home","title":"FLOWFoil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FLOWFoil.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FLOWFoil]","category":"page"},{"location":"#FLOWFoil.BodyMesh","page":"Home","title":"FLOWFoil.BodyMesh","text":"BodyMesh{TF,TB}\n\nMesh for single body.\n\nFields:\n\n'airfoil_nodes::Array{Array{Float,2}}' : [x y] node (panel edge) locations for airfoil\n'blunt_te::Bool' : boolean for whether or not the trailing edge is blunt or not.\n\nAssuptions:\n\nx and y coordinates start at the bottom trailing edge and proceed clockwise.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Debug","page":"Home","title":"FLOWFoil.Debug","text":"Debug{TIS,TVS}\n\nFields:\n\n'isystem::InviscidSystem' : Inviscid System Object.\n'vsystem::ViscousSystem' : Viscous System Object.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.InviscidSolution","page":"Home","title":"FLOWFoil.InviscidSolution","text":"InviscidSolution{TM,TF,TD}\n\nFields:\n\n'mesh::BodyMesh' : BodyMesh object describing airfoil nodes etc.\n'panelgammas::Array{Float,2}' : gamma_0 and gamma_90 values at each airfoil node.\n'psi0::Array{Float}' : Psi_0 (constant stream function) 0 and 90 values.\n'debug::Debug' : Debug object (or nothing) depending on debug flag in Problem object.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.InviscidSystem","page":"Home","title":"FLOWFoil.InviscidSystem","text":"InviscidSystem{TF}\n\nFields:\n\n'vcoeffmat::Array{Float,2}' : Vortex Coefficient Matrix used in solution.\n'bccoeffvec::Array{Float,2}' : Boundary Coefficient Vector used in solution.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Parameters","page":"Home","title":"FLOWFoil.Parameters","text":"Parameters{TF}\n\nSolver Parameters.\n\nFields:\n\n`gamma_air::Float = 1.4' : ratio of specific heats for air\n`eta_crit::Float = 9.0' : critical amplification factor\n`eta_D::Float = 0.9' : wall/wake dissipation length ratio\n`GA::Float = 6.7' : G - Beta locus A constant\n`GB::Float = 0.75' : G - Beta locus B constant\n`GC::Float = 18.0' : G - Beta locus C constant\n`Klag::Float = 5.6' : shear lag constant\n`Ctau::Float = 1.8' : shear stress initialization constant\n`Etau::Float = 3.3' : shear stree initialization exponent\n`rSu::Float = 0.35' : Sutherland temperature ratio\n`fw::Float = 2.5' : wake gap continuation factor\n`dw::Float = 1.0' : wake length, in airfoil chords\n`epsilonw::Float = 1e-5' : first wake point offset, in airfoil chords\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Polar","page":"Home","title":"FLOWFoil.Polar","text":"Polar{TF}\n\nFields:\n\n'lift::Float' : Lift Coefficient.\n'drag::Float' : Total Drag Coefficient.\n'pdrag::Float' : Pressure Drag Coefficient.\n'idrag::Float' : Induced Drag Coefficient.\n'moment::Float' : Moment Coefficient.\n'surfacevelocity::Vector{Float}' : surface velocity distribution\n'surfacepressure::Vector{Float}' : surface pressure distribution\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Problem","page":"Home","title":"FLOWFoil.Problem","text":"Problem{TF,TB}\n\nProblem definition (geometry, operating point(s), and method selection) and output behavior.\n\nFields:\n\n'coordinates::Array{Float}' : x,y airfoil coordinates.\n'angleofattack::Float' : angle of attack to analyze.\n'reynolds::Float' : Reynolds number to analyze.\n'mach::Float' : Mach number to analyze.\n'viscous::Bool' : Flag to solve viscous or inviscid only\n'verbose::Bool' : Flag to print out verbose statements\n'debug::Bool' : Flag to save the system structs, etc.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.ViscousSolution","page":"Home","title":"FLOWFoil.ViscousSolution","text":"ViscousSolution{}\n\nFields:\n\n'panelgammas::Array{Float,2}' : gamma_0 and gamma_90 values at each airfoil node.\n'panelsources::Array{Float,2}' : source values at each airfoil node.\n'wakesources::Array{Float,2}' : source values at each wake node.\n'psi0::Array{Float}' : Psi_0 (constant stream function) 0 and 90 values.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.ViscousSystem","page":"Home","title":"FLOWFoil.ViscousSystem","text":"Fields:\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.WakeMesh","page":"Home","title":"FLOWFoil.WakeMesh","text":"WakeMesh{TF}\n\nFields:\n\n'wake_nodes::Array{Float,2}' : x,y wake panel node locations.\n'wake_midpoints::Array{Float,2}' : x,y wake panel center point locations.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.assemble_boundary_conditions-Tuple{Any}","page":"Home","title":"FLOWFoil.assemble_boundary_conditions","text":"assemble_boundary_conditions(mesh, freestream)\n\nAssemble boundary condition vector.\n\nArguments:\n\n'mesh::BodyMesh' : mesh system for which to solve\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.assemble_vortex_coefficients-Tuple{Any}","page":"Home","title":"FLOWFoil.assemble_vortex_coefficients","text":"assemble_vortex_coefficients(mesh)\n\nAssemble matrix of vortex strength coefficients.\n\nThis function only assembles the NxN portion of the influence coefficient matrix. It does not include the kutta condition. Also note that multibody capabilities have not yet been implemented.\n\nArguments:\n\n'mesh::BodyMesh' : mesh system for which to find influence coefficient matrix.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.assemble_vortex_matrix-Tuple{Any}","page":"Home","title":"FLOWFoil.assemble_vortex_matrix","text":"assemble_vortex_matrix(mesh)\n\nAssemble vortex coefficient matrix with full N+1 x N+1 system, including Kutta condition.\n\nArguments:\n\n'mesh::BodyMesh' : Mesh System for which to solve.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.camber-Tuple{Float64, Number, Number}","page":"Home","title":"FLOWFoil.camber","text":"camber(x::Float64, maxcamber::Number, camberpose::Number)\n\nCompute camber at a given chord-normalized x-position by NACA 4-series camber equations.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.defaultparameters-Tuple{}","page":"Home","title":"FLOWFoil.defaultparameters","text":"defaultparameters(;kwargs)\n\nInitialized parameters to defaults, but allows selective user override through keyword arguments.\n\nKeyword Arguments:\n\n`gamma_air::Float' : ratio of specific heats for air\n`eta_crit::Float' : critical amplification factor\n`eta_D::Float' : wall/wake dissipation length ratio\n`GA::Float' : G - Beta locus A constant\n`GB::Float' : G - Beta locus B constant\n`GC::Float' : G - Beta locus C constant\n`Klag::Float' : shear lag constant\n`Ctau::Float' : shear stress initialization constant\n`Etau::Float' : shear stree initialization exponent\n`rSu::Float' : Sutherland temperature ratio\n`fw::Float' : wake gap continuation factor\n`dw::Float' : wake length, in airfoil chords\n`epsilonw::Float' : first wake point offset, in airfoil chords\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.generate_mesh-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.generate_mesh","text":"generatemesh(x, y; chordlength, wakelength)\n\nCreate panels from input geometry coordinates.\n\nArguments:\n\n'x::Vector{Float}' : x coordinates defining airfoil geometry.\n'y::Vector{Float}' : y coordinates defining airfoil geometry.\n\nKeyword Arguments:\n\ngaptolerance::Float' : Tolerance for how close, relative to the chord, the trailing edge nodes can be before being considered a sharp trailing edge. (default = 1e-10)\nwakelength::Float' : length of wake relative to chord (default = 1)\n\nReturns\n\nmesh::BodyMesh : Geometry mesh, including panel nodes and trailing edge condition.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.generate_mesh-Tuple{Any}","page":"Home","title":"FLOWFoil.generate_mesh","text":"generate_mesh(coordinates; kwargs)\n\nIdentical to implementation with x and y separate, but here with x,y coordinates together in a single array [X Y].\n\nArguments:\n\n'coordinates::Array{Float,2}' : array of both x and y coordinates (x first column, y second column).\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_a-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_a","text":"get_a(r1, d, dmag)\n\nCalculate distance from panel to evalulation point in the panel tangent direction.\n\nArguments:\n\n'r1::Vector{Float}' : vector from node1 to evalulation point.\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_d-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_d","text":"get_d(node1, node2)\n\nCalculate panel length (between adjacent nodes).\n\nArguments:\n\n'node1::Array{Float}(2)' : [x y] location of first node\n'node2::Array{Float}(2)' : [x y] location of second node\n\nReturns\n\n'd::Vector{Float}' : vector from node1 to node2\n'dmag::Float' : length of panel between node1 and node2\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_distances-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_distances","text":"get_distances(node1, node2, point)\n\nGet vectors and magnitudes for panel and between nodes and validation points.\n\nArguments:\n\n'node1::Array{Float}' : [x y] position of node1.\n'node2::Array{Float}' : [x y] position of node2.\n'point::Array{Float}' : [x y] position of evaluation point.\n\nReturns:\n\n'r1::Vector{Float}' : vector from node1 to evaluation point.\n'r1mag::Float' : distance from node1 to evaluation point.\n'r2::Vector{Float}' : vector from node2 to evaluation point.\n'r2mag::Float' : distance from node2 to evaluation point.\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_h-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_h","text":"get_h(r1, d, dmag)\n\nCalculate distance from panel to evalulation point in the panel normal direction.\n\nArguments:\n\n'r1::Vector{Float}' : vector from node1 to evalulation point.\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_inviscid_system-Tuple{Any}","page":"Home","title":"FLOWFoil.get_inviscid_system","text":"get_inviscid_system(mesh)\n\nCalculate, then gather the vortex and boundary condition matricies into an InviscidSystem object.\n\nArguments:\n\n'mesh::BodyMesh' : BodyMesh for airfoil to analyze.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_normal-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_normal","text":"get_normal(d, dmag)\n\nGet unit normal to panel.\n\nArguments:\n\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_orientation-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_orientation","text":"get_orientation(node1, node2, point)\n\nGet angles between panel and evaluation point, ln of distances from nodes to evaluation point, and evaluation point position relative to panel.\n\nArguments:\n\n'node1::Array{Float}' : [x y] position of node1.\n'node2::Array{Float}' : [x y] position of node2.\n'point::Array{Float}' : [x y] position of evaluation point.\n\nReturns:\n\n'theta1::Float' : Angle between panel and evaluation point, centered at node1.\n'theta2::Float' : Angle between panel and evaluation point, centered at node2.\n'ln1::Float' : Natural log of distance from node1 to evaluation point.\n'ln2::Float' : Natural log of distance from node2 to evaluation point.\n'h::Float' : Distance from panel to evaluation in panel normal direction.\n'a::Float' : Distance from node1 to evaluation in panel tangent direction.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psibargamma-NTuple{7, Any}","page":"Home","title":"FLOWFoil.get_psibargamma","text":"get_psibargamma(theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  overbarPsi^gamma\n\nArguments:\n\n'theta1::Float' : angle between panel and vector from node1 to evaluation point\n'theta2::Float' : angle between panel and vector from node2 to evaluation point\n'ln1::Float' : value of ln(rmag1), which may be that or 0.0, depening on evaluation point location\n'ln2::Float' : value of ln(rmag2), which may be that or 0.0, depening on evaluation point location\n'dmag::Float' : panel length\n'h::Float' : height of right triangle with hypontenuse, r1, and base, a, colinear with panel.\n'a::Float' : length of base of right triangle with height, h, and hypontenuse, r1.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psibarsigma-NTuple{7, Any}","page":"Home","title":"FLOWFoil.get_psibarsigma","text":"get_psibarsigma(theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  overbarPsi^sigma\n\nArguments:\n\n'theta1::Float' : Angle between panel and evaluation point, centered at node1.\n'theta2::Float' : Angle between panel and evaluation point, centered at node2.\n'ln1::Float' : Natural log of distance from node1 to evaluation point.\n'ln2::Float' : Natural log of distance from node2 to evaluation point.\n'h::Float' : Distance from panel to evaluation in panel normal direction.\n'a::Float' : Distance from node1 to evaluation in panel tangent direction.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psitildegamma-NTuple{10, Any}","page":"Home","title":"FLOWFoil.get_psitildegamma","text":"get_psitildegamma(psibargamma, r1mag, r2mag, theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  widetildePsi^gamma\n\nArguments:\n\n'psibargamma::Float' : value of overbarPsi^gamma\n'r1mag::Float' : distance from node1 to evaluation point\n'r2mag::Float' : distance from node2 to evaluation point\n'theta1::Float' : angle between panel and vector from node1 to evaluation point\n'theta2::Float' : angle between panel and vector from node2 to evaluation point\n'ln1::Float' : value of ln(rmag1), which may be that or 0.0, depening on evaluation point location\n'ln2::Float' : value of ln(rmag2), which may be that or 0.0, depening on evaluation point location\n'dmag::Float' : panel length\n'h::Float' : height of right triangle with hypontenuse, r1, and base, a, colinear with panel.\n'a::Float' : length of base of right triangle with height, h, and hypontenuse, r1.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psitildesigma-NTuple{8, Any}","page":"Home","title":"FLOWFoil.get_psitildesigma","text":"get_psitildesigma(psibargamma, r1mag, r2mag, theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  widetildePsi^sigma\n\nArguments:\n\n'psibargamma::Float' : value of overbarPsi^gamma\n'r1mag::Float' : distance from node1 to evaluation point\n'r2mag::Float' : distance from node2 to evaluation point\n'theta1::Float' : angle between panel and vector from node1 to evaluation point\n'theta2::Float' : angle between panel and vector from node2 to evaluation point\n'dmag::Float' : panel length\n'h::Float' : height of right triangle with hypontenuse, r1, and base, a, colinear with panel.\n'a::Float' : length of base of right triangle with height, h, and hypontenuse, r1.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_r-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_r","text":"function get_r(node,point)\n\nCalculate the vector, mathbfr, and distance, r, from the node to the evaluation point\n\nArguments:\n\nnode::Array{Float} : [x y] position of node\npoint::Array{Float} : [x y] position of point.\n\nReturns\n\n'r::Vector{Float}' : vector from node to evaluation point\n'rmag::Float' : length of panel between node and evaluation point\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_source_influence-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_source_influence","text":"get_source_influence(node1, node2, point)\n\nCalculate source influence coefficients on the evaluation point from the panel between node1 and node2.\n\nArguments:\n\n'node1::Array{Float}(2)' : [x y] location of node1\n'node2::Array{Float}(2)' : [x y] location of node2\n'point::Array{Float}(2)' : [x y] location of evaluation point\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_tangent-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_tangent","text":"get_tangent(d, dmag)\n\nGet unit tangent to panel.\n\nArguments:\n\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_theta-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_theta","text":"get_theta(h, a, dmag)\n\nGet angle (in radians) between panel and vector from node2 to evaluation point.\n\nArguments:\n\n'h::Float' : Distance, normal to panel, between panel and evaluation point.\n'a::Float' : Distance, tangent to panel, between node1 and evaluation point.\n'dmag::Float' : Panel lentgh.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_theta-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_theta","text":"get_theta(h, a)\n\nGet angle (in radians) between panel and vector from node1 to evaluation point.\n\nArguments:\n\n'h::Float' : Distance, normal to panel, between panel and evaluation point.\n'a::Float' : Distance, tangent to panel, between node1 and evaluation point.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_vortex_influence-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_vortex_influence","text":"get_vortex_influence(node1, node2, point)\n\nCalculate vortex influence coefficients on the evaluation point from the panel between node1 and node2.\n\nArguments:\n\n'node1::Array{Float}(2)' : [x y] location of node1\n'node2::Array{Float}(2)' : [x y] location of node2\n'point::Array{Float}(2)' : [x y] location of evaluation point\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.initalize_viscous-Tuple{Any}","page":"Home","title":"FLOWFoil.initalize_viscous","text":"initalize_viscous(problem)\n\nInitialized viscous solution (solves invscid problem, initialized wake and boundary layer, etc.)\n\nArguments:\n\nproblem::Problem' : Problem to solve.\n\nReturns:\n\nsolution::ViscousSolution' : Initialized ViscousSolution\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.initialize_wake-Tuple{}","page":"Home","title":"FLOWFoil.initialize_wake","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.joukowsky","page":"Home","title":"FLOWFoil.joukowsky","text":"joukowsky(center::Array{Float64}=[-0.1 0.1] ; N::Int=360)\n\nCalculate the unit Joukowsky Airfoil based on a cylinder's center point.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.karmantrefftz","page":"Home","title":"FLOWFoil.karmantrefftz","text":"karmantrefftz(center::Array{Float64}=[-0.1 0.1], wedge::Float64=0.0;N::Int=360)\n\nCalculate geometry of Karman-Trefftz airfoil based on the center point of a cylinder and a wedge angle.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.naca4","page":"Home","title":"FLOWFoil.naca4","text":"naca4(c::Number=2.0, p::Number=4.0, t::Number=12.0, N::Int=100;bluntTE::Bool=false)\n\nCompute x, y airfoil coordinates for N nodes, based on NACA 4-Series Parameterization.\n\nx, y-upper, and y-lower coordinates are output. All have both leading and trailing edge points.\n\nkeyword argument: bluntTE=false (default) controls whether the blunt or sharp trailing edge formulation is used.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.rawjoukowsky","page":"Home","title":"FLOWFoil.rawjoukowsky","text":"rawjoukowsky(center::Array{Float64}=[-0.1 0.1] ; N::Int=360)\n\nCalculate geometry of Joukowsky Airfoil based on a cylinder's center point.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.rawkarmantrefftz","page":"Home","title":"FLOWFoil.rawkarmantrefftz","text":"rawkarmanTrefftzFoil(center::Array{Float64}=[-0.1 0.1], wedge::Float64=0.0;N::Int=360)\n\nCalculate geometry of Karman-Trefftz airfoil based on the center point of a cylinder and a wedge angle.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.solve-Tuple{Any}","page":"Home","title":"FLOWFoil.solve","text":"solve(problem)\n\nSolve problem defined by the input Problem object and return the solution in a Solution object.\n\nArguments:\n\n'problem::Problem' : Problem to solve\n\nReturns:\n\n'solution::{InviscidSolution or ViscousSolution}' : returns solution of type matching viscous flag in problem.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.solve_inviscid-Tuple{Any}","page":"Home","title":"FLOWFoil.solve_inviscid","text":"solve_inviscid(problem)\n\nSolves the inviscid problem.\n\nArguments:\n\n'problem::Problem' : Problem to solve.  viscous field must be set to false.\n\nReturns:\n\n'solution::InviscidSolution'\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.solve_inviscid_system-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.solve_inviscid_system","text":"solve_inviscid_system(inviscidsystem, mesh; debug=false)\n\nSolve the InviscidSystem for the vortex and streamfunction strengths.\n\nOutputs the InviscidSolution object which contains the inviscidsystem in the debug object if debug is set to true.\n\nArguments:\n\n'inviscidsystem::InviscidSystem' : InviscidSystem to solve.\n'mesh::BodyMesh' : BodyMesh defining geometry (to put into solution object)\n\nKeyword Arguments:\n\n'debug::Bool = false' : flag to indicate whether or not to output all the system details.\n\nReturns:\n\n'solution::InviscidSolution'\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.solve_viscous-Tuple{Any}","page":"Home","title":"FLOWFoil.solve_viscous","text":"solve_viscous(problem)\n\nSolves the viscous problem.\n\nArguments:\n\n'problem::Problem' : Problem Definition.\n\nReturns:\n\n'solution::ViscousSolution'\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.thickness-Tuple{Float64, Number}","page":"Home","title":"FLOWFoil.thickness","text":"thickness(x::Float64, maxthick::Number; bluntTE::Bool=false)\n\nCompute thickness at a given chord-normalized x-position by NACA 4-series thickness equations.\n\n\n\n\n\n","category":"method"}]
}
