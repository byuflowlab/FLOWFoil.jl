var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FLOWFoil","category":"page"},{"location":"#FLOWFoil","page":"Home","title":"FLOWFoil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FLOWFoil.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FLOWFoil]","category":"page"},{"location":"#FLOWFoil.Freestream","page":"Home","title":"FLOWFoil.Freestream","text":"Freestream{TF}\n\nFreestream Definition.\n\nFields:\n\n'reynolds::Vector{Float}' : Reynolds Numbers.\n'machs::Vector{Float}' : Mach Numbers.\n'anglesofattack::Vector{Float}' : Angles of attack.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Mesh","page":"Home","title":"FLOWFoil.Mesh","text":"Mesh{TF}\n\nMesh for single body.\n\nFields:\n\n'airfoil_nodes::Array{Array{Float,2}}' : [x y] node (panel edge) locations for airfoil\n'wake_nodes::Array{Array{Float,2}}' : [x y] node (panel edge) locations for wake\n'wake_midpoints::Array{Array{Float,2}}' : [x y] wake panel midpoint locations\n'blunt_te::Bool' : boolean for whether or not the trailing edge is blunt or not.\n\nAssuptions:\n\nx and y coordinates start at the bottom trailing edge and proceed clockwise.\nx and y coordinates are normalized such that the airfoil has chord length 1.0.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.MeshSystem","page":"Home","title":"FLOWFoil.MeshSystem","text":"MeshSystem{TF}\n\nSystem of meshes to solve.\n\nFields:\n\n'meshes::Array{Mesh}' : Array of mesh objects.\n'scales::Vector{Float}' : Airfoil scaling factors.\n'angles::Vector{Float}' : Airfoil angles of attack.\n'locations::Array{Array{TF}}' : Array of leading edge locations.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Problem","page":"Home","title":"FLOWFoil.Problem","text":"Problem{TM,TS,TB}\n\nProblem definition and method selection.\n\nFields:\n\n'meshsystem::MeshSystem : Mesh System to solve.\n'panelshape::String' : Shape of panel to use, e.g., \"le.g.r\".\n'singularitytype::String' : Type of singularity to use, e.g., \"source\".\n'singularityorder::String' : Order of singularity distributions, e.g., \"constant\".\n'verbose::Bool' : Flag to print out verbose statements.\n'debug::Bool' : Flag to print out debugging statements.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Solution","page":"Home","title":"FLOWFoil.Solution","text":"Solution{TM,TF}\n\nOutput object containing solution and useful items.\n\nFields:\n\n'meshsystem::MeshSystem' : Mesh System used in solution (potentially modified from input meshes).\n'strengthsvec::Array{Float,2}' : singularity strengths.\n'geocoeffmat::Array{Float,2}' : Geometric Coefficient Matrix used in solution.\n'bccoeffvec::Vector{Float}' : Boundary Coefficient Vector used in solution.\n'lift::Vector{Float}' : Lift Coefficients.\n'drag::Vector{Float}' : Total Drag Coefficients.\n'pdrag::Vector{Float}' : Pressure Drag Coefficients.\n'idrag::Vector{Float}' : Induced Drag Coefficients.\n'moment::Vector{Float}' : Moment Coefficients.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.assembleboundaryconditions-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.assembleboundaryconditions","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.assemblematrixa!-Tuple{Any}","page":"Home","title":"FLOWFoil.assemblematrixa!","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.assemblematrixa-Tuple{Any}","page":"Home","title":"FLOWFoil.assemblematrixa","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.assemblevortexcoefficients-Tuple{Any}","page":"Home","title":"FLOWFoil.assemblevortexcoefficients","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.distances-Tuple{Any}","page":"Home","title":"FLOWFoil.distances","text":"distances(meshsystem)\n\nmeshsystem::MeshSystem : Mesh System for which to calculate distances.\n\nReturns\n\nrs::Array{Float,2} : Distances from panel edges to control points.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.generatemesh-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.generatemesh","text":"generatemesh(coordinates; order=\"linear\")\n\nCreate panels from input geometry coordinates.\n\nArguments:\n\n'x::Vector{Float}' : x coordinates defining airfoil geometry.\n'y::Vector{Float}' : y coordinates defining airfoil geometry.\n\nReturns\n\nmesh::Mesh : Geometry mesh, including panel edge points and collocation points.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_a-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_a","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_d-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_d","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_h-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_h","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_normal-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_normal","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psibargamma-NTuple{7, Any}","page":"Home","title":"FLOWFoil.get_psibargamma","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psitildegamma-NTuple{10, Any}","page":"Home","title":"FLOWFoil.get_psitildegamma","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_r-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_r","text":"function get_r(edge,point)\n\nCalculate the vector, mathbfr, and distance, r, from the node to the evaluation point\n\nArguments:\n\nnode::Array{Float} : [x y] position of node\npoint::Array{Float} : [x y] position of point.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_theta-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_theta","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_vortex_influence-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_vortex_influence","text":"function_name(args; kwargs)\n\nFunction Description.\n\nDetailed Description.\n\nArguments:\n\narg::type : description.\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.joukowsky","page":"Home","title":"FLOWFoil.joukowsky","text":"joukowsky(center::Array{Float64}=[-0.1 0.1] ; N::Int=360)\n\nCalculate the unit Joukowsky Airfoil based on a cylinder's center point.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.karmantrefftz","page":"Home","title":"FLOWFoil.karmantrefftz","text":"karmantrefftz(center::Array{Float64}=[-0.1 0.1], wedge::Float64=0.0;N::Int=360)\n\nCalculate geometry of Karman-Trefftz airfoil based on the center point of a cylinder and a wedge angle.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.normals-Tuple{Any}","page":"Home","title":"FLOWFoil.normals","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.rawjoukowsky","page":"Home","title":"FLOWFoil.rawjoukowsky","text":"rawjoukowsky(center::Array{Float64}=[-0.1 0.1] ; N::Int=360)\n\nCalculate geometry of Joukowsky Airfoil based on a cylinder's center point.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.rawkarmantrefftz","page":"Home","title":"FLOWFoil.rawkarmantrefftz","text":"rawkarmanTrefftzFoil(center::Array{Float64}=[-0.1 0.1], wedge::Float64=0.0;N::Int=360)\n\nCalculate geometry of Karman-Trefftz airfoil based on the center point of a cylinder and a wedge angle.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.sizesystem-Tuple{Any}","page":"Home","title":"FLOWFoil.sizesystem","text":"sizesystem(meshsystem)\n\nCount size of inviscid system matrix.\n\nArguments:\n\n'meshsystem::MeshSystem' : The system for which to calculate the linear system size.\n\n\n\n\n\n","category":"method"}]
}
