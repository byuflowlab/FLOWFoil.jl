var documenterSearchIndex = {"docs":
[{"location":"AirfoilTools/parameterizations/#Common-Parameterizations","page":"Airfoil Generation","title":"Common Parameterizations","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Included in the AirfoilTools module are the following common airfoil parameterizations for convenience in generating various airfoil geometries.","category":"page"},{"location":"AirfoilTools/parameterizations/#Parameter-Types","page":"Airfoil Generation","title":"Parameter Types","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Each of the parameterizations below have associated composite types whose fields are the parameters used in defining the airfoil geometries.  Each of these composite types is defined using the @kwdef macro such that the user does not need to remember the order of the fields, but can simply define the fields as though they were keyword arguments. In general, few of the fields are given defaults with the exception of thigns like trailing edge gap or z-positions, which are always defaulted to zero. In addition, some parameterization methods have specific values inherent to their methods. These are exposed to the user for convenience, but are also defaulted to the values inherent in the parameterization method.","category":"page"},{"location":"AirfoilTools/parameterizations/#Coordinates","page":"Airfoil Generation","title":"Coordinates","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"For all of the parameterizations, the x-coordinates are defined to be along the chord-wise direction, and the z-coordinates are orthogonal to the x-coordinates.  This is done to be similar to the standard airframe coordinate system, with the x-direction being positve toward the back of the airframe, and the z-direction being up.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"In addition all coordinates are given clockwise from the trailing edge, even if the coordinates are split between upper and lower sides.  In other words, the coordinates are given from the lower trailing edge to the leading edge, then the leading edge back to the upper side trailing edge.  In general, if the coordinates are given in an upper and lower split, the leading edge point is repeated.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#NACA-4-series","page":"Airfoil Generation","title":"NACA 4-series","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We begin with the standard NACA 4-series airfoil, defining the parameters in the NACA4 type as","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.NACA4","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.NACA4","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.NACA4","text":"Fields:\n\nmax_camber::Float=2.0 : maximum camber in % chord\nmax_camber_pos::Float=4.0 : x-position of maximum camber point in 1/10 chord\nmax_thickness::Float=12.0 : maximum thickness in % chord\nblunt_te::Bool=false : flag for whether to use the blunt trailing edge NACA 4-series definition or not.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"note: Defaults\nThe NACA4 parameter type is the only one with fully defined defaults, which happen to default to the NACA 2412 airfoil with a sharp trailing edge due to its ubiquity.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"A NACA 4-series airfoil can be defined with either of the naca4 methods.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.naca4","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.naca4","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.naca4","text":"naca4(parameters::NACA4; N=161, x=nothing, split=false)\n\nCompute x, z airfoil coordinates for N nodes, based on NACA 4-Series Parameterization.\n\nArguments:\n\nparameters::NACA4 : NACA 4-series parameters\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use.  This values should be odd, but if not, the number of points returned will be N-1.\nx::AbstractArray{Float} : x coordinates (cosine spaced coordinates used by default)\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\nnaca4(c=2.0, p=4.0, t=12.0; N=161, x=nothing, blunt_te=false, split=false)\n\nCompute x, z airfoil coordinates for N nodes, based on NACA 4-Series Parameterization.\n\nArguments:\n\nc::Float : Maximum camber value (percent of chord)\np::Float : Position along chord (in 10ths of chord) where maximum naca4_camber lies\nt::Float : Maximum thickness of airfoil in percent chord\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use.  This values should be odd, but if not, the number of points returned will be N-1.\nx::AbstractArray{Float} : x-coordinates (cosine spaced coordinates used by default)\nblunt_te::Bool : Flag whether trailing edge is blunt or not\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"For a given set of x,z coordinates a best-fit NACA 4-series airfoil can be found using","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.determine_naca4","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_naca4","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_naca4","text":"determine_naca4(x,z)\n\nCalculate NACA 4-series parameters based on input x,z coordinates.\n\nReturns:\n\nparameters::NACA4 : a parameter object of type NACA4.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#Conformal-Mapping","page":"Airfoil Generation","title":"Conformal Mapping","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools includes two conformal mapping methods; the first is the Joukowsky method, and the second is the KarmanTrefftz method (which is a variation on Joukowsky allowing for non-cusped trailing edges)","category":"page"},{"location":"AirfoilTools/parameterizations/#Joukowsky","page":"Airfoil Generation","title":"Joukowsky","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The Joukowsky parameter type is defined as","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.Joukowsky","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.Joukowsky","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.Joukowsky","text":"Fields:\n\ncenter::AbstractArray{Float} : [x z] location of center of circle relative to origin\nradius::Float : radius of circle\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"A Joukowsky airfoil can be generated with","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.joukowsky","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.joukowsky","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.joukowsky","text":"joukowsky(parameters::Joukowsky; N, fortest=false, normalize=true, split=false)\n\nJoukowsky airfoil parameterization.\n\nArguments:\n\nparameters::Joukowsky : Joukowsky parameters\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\nfortest::Bool : Flag to output non-coordinate paramters used in 'joukowsky_flow()'\nnormalize::Bool : Flag whether to normalize to unit chord and translate the leading edge to zero.\nsplit::Bool : Flag wheter to split output into upper and lower surfaces.\n\nReturns:\n\nIF split == False:\n\nx::AbstractArray{Float} : Array of x coordinates\nz::AbstractArray{Float} : Array of z coordinates\n\nIF split == True:\n\nxu::AbstractArray{Float} : Array of upper half of x coordinates\nxl::AbstractArray{Float} : Array of lower half of x coordinates\nzu::AbstractArray{Float} : Array of upper half of z coordinates\nzl::AbstractArray{Float} : Array of lower half of z coordinates\n\n\n\n\n\njoukowsky(center, radius; N, fortest=false, normalize=true, split=false)\n\nJoukowsky airfoil parameterization.\n\nArguments:\n\ncenter::AbstractArray{Float} : [x z] location of center of circle relative to origin\nradius::Float : radius of circle\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\nfortest::Bool : Flag to output non-coordinate paramters used in 'joukowsky_flow()'\nnormalize::Bool : Flag whether to normalize to unit chord and translate the leading edge to zero.\nsplit::Bool : Flag wheter to split output into upper and lower surfaces.\n\nReturns:\n\nIF split == False:\n\nx::AbstractArray{Float} : Array of x coordinates\nz::AbstractArray{Float} : Array of z coordinates\n\nIF split == True:\n\nxu::AbstractArray{Float} : Array of upper half of x coordinates\nxl::AbstractArray{Float} : Array of lower half of x coordinates\nzu::AbstractArray{Float} : Array of upper half of z coordinates\nzl::AbstractArray{Float} : Array of lower half of z coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#Karman-Trefftz","page":"Airfoil Generation","title":"Karman-Trefftz","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The KarmanTrefftz parameter type is defined as","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.KarmanTrefftz\nAirfoilTools.KarmanTrefftz(center,wedge_angle)","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.KarmanTrefftz","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.KarmanTrefftz","text":"Fields:\n\nbeta::Float : angle, in radians indicating center of circle relative to origin\nradius::Float : radius of circle\nwedge_angle::Float : angle, in radians, of airfoil wedge angle\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.KarmanTrefftz-Tuple{Any, Any}","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.KarmanTrefftz","text":"KarmanTrefftz(center, wedge_angle)\n\nArguments\n\ncenter::AbstractArray{Float} : [x z] location of circle center relative to origin\nwedge_angle::Float : angle, in radians, of airfoil wedge angle\n\nReturns\n\nparameters::KarmanTrefftz : KarmanTrefftz parameters\n\n\n\n\n\n","category":"method"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"A Karman-Trefftz airfoil can be generated with","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.karman_trefftz","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.karman_trefftz","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.karman_trefftz","text":"karman_trefftz(paramters::KarmanTrefftz; N=361, normalize=true, split=false)\n\nKarman-Trefftz airfoil parameterization based on angle beta, raidus, and wedge angle.\n\nArguments:\n\nparamters::KarmanTrefftz : KarmanTrefftz parameters\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\nnormalize::Bool : Flag whether to normalize output to unit chord and shift to have leading edge at zero.\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\nkarman_trefftz(beta, radius, wedge_angle; N=361, normalize=true, split=false)\n\nKarman-Trefftz airfoil parameterization based on angle beta, raidus, and wedge angle.\n\nArguments:\n\nbeta::Float : angle, in radians indicating center of circle relative to origin\nradius::Float : radius of circle\nwedge_angle::Float : angle, in radians, of airfoil wedge angle\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\nnormalize::Bool : Flag whether to normalize output to unit chord and shift to have leading edge at zero.\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\nkarman_trefftz(center, wedge_angle; N=361, normalize=true, split=false)\n\nIdentical to karman_trefftz(beta, radius, wedge_angle) but using center-based version.\n\nArguments:\n\ncenter::AbstractArray{Float} : [x z] location of circle center relative to origin\nwedge_angle::Float : angle, in radians, of airfoil wedge angle\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\nnormalize::Bool : Flag whether to normalize out put to unit chord and shift to have leading edge at zero.\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIF split == False:\n\nx::AbstractArray{Float} : Array of x coordinates\nz::AbstractArray{Float} : Array of z coordinates\n\nIF split == True:\n\nxu::AbstractArray{Float} : Array of upper half of x coordinates\nxl::AbstractArray{Float} : Array of lower half of x coordinates\nzu::AbstractArray{Float} : Array of upper half of z coordinates\nzl::AbstractArray{Float} : Array of lower half of z coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#[C](#)lass-[S](#)hape-[T](#)ransformations-([CST](#))","page":"Airfoil Generation","title":"Class Shape Transformations (CST)","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The CST parameter type is defined as","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.CST","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.CST","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.CST","text":"Fields:\n\nupper_coefficients::AbstractArray{Float} : Vector of coefficients defining the upper side.\nlower_coefficients::AbstractArray{Float} : Vector of coefficients defining the lower side.\ntrailing_edge_zu::Float=0.0 : z-position of the upper side trailing edge.\ntrailing_edge_zl::Float=0.0 : z-position of the lower side trailing edge.\nN1::Float=0.5 : inherent parameter for round-nosed airfoils.\nN2::Float=1.0 : inherent parameter for sharp trailing edge (with optional blunt trailing edge) airfoils.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"A CST airfoil can be generated with","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.cst","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.cst","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.cst","text":"cst(\n    CST,\n    N::Integer=80,\n    x=split_cosine_spacing(N),\n    split=false,\n)\n\nObtain airfoil coordiantes (clockwise from trailing edge) from the class shape transformation (CST) parameterization.\n\nArguments:\n\nparameters::CST : CST parameters for airfoil.\n\nKeyword Arguments:\n\nN::Integer=80 : number of points to use for each side\nx::AbstractArray{Float}=split_cosine_spacing(N) : x-coordinates to use.\ntrailing_edge_zu::Float=0.0 : upper side trailing edge gap\ntrailing_edge_zl::Float=0.0 : lower side trailing edge gap\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\nsplit::Bool=false : if true, returns upper and lower coordinates separately as xl, xu, zl, zu rather than just x, z.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\ncst(\n    upper_coefficients,\n    lower_coefficients;\n    N::Integer=80,\n    x=split_cosine_spacing(N),\n    trailing_edge_zu=0.0,\n    trailing_edge_zl=0.0,\n    N1=0.5,\n    N2=1.0,\n    split=false,\n)\n\nObtain airfoil coordiantes (clockwise from trailing edge) from the class shape transformation (CST) parameterization.\n\nArguments:\n\nupper_coefficients::AbstractArray{Float} : Vector of CST coefficients for upper side of airfoil.\nlower_coefficients::AbstractArray{Float} : Vector of CST coefficients for lower side of airfoil.\n\nKeyword Arguments:\n\nN::Integer=80 : number of points to use for each side\nx::AbstractArray{Float}=split_cosine_spacing(N) : x-coordinates to use.\ntrailing_edge_zu::Float=0.0 : upper side trailing edge gap\ntrailing_edge_zl::Float=0.0 : lower side trailing edge gap\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\nsplit::Bool=false : if true, returns upper and lower coordinates separately as xl, xu, zl, zu rather than just x, z.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"For a given set of x,z coordinates a best-fit CST airfoil can be found using","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.determine_cst","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_cst","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_cst","text":"determine_cst(\n    x,\n    z;\n    n_upper_coefficients::Integer=8,\n    n_lower_coefficients::Integer=8,\n    trailing_edge_zu=0.0,\n    trailing_edge_zl=0.0,\n    N1=0.5,\n    N2=1.0,\n)\n\nDetermine best-fit CST parameters using a least squares solve.\n\nArguments:\n\nx::AbstractArray{Float} : vector of x-coordinates.\nz::AbstractArray{Float} : vector of z-coordinates.\n\nKeyword Arguments:\n\nn_upper_coefficients::Integer=8 : number of upper side coefficients to fit\nn_lower_coefficients::Integer=8 : number of lower side coefficients to fit\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\n\nReturns:\n\nparamters::CST : CST paramters for airfoil.\n\n\n\n\n\ndetermine_cst(\n    xl,\n    xu,\n    zl,\n    zu;\n    n_upper_coefficients::Integer=8,\n    n_lower_coefficients::Integer=8,\n    N1=0.5,\n    N2=1.0,\n)\n\nDetermine best-fit CST parameters for upper and lower sides of airfoil using a least squares solve.\n\nArguments:\n\nxl::AbstractArray{Float} : vector of lower side x-coordinates.\nxu::AbstractArray{Float} : vector of upper side x-coordinates.\nzl::AbstractArray{Float} : vector of lower side z-coordinates.\nzu::AbstractArray{Float} : vector of upper side z-coordinates.\n\nKeyword Arguments:\n\nn_upper_coefficients::Integer=8 : number of upper side coefficients to fit\nn_lower_coefficients::Integer=8 : number of lower side coefficients to fit\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\n\nReturns:\n\nparamters::CST : CST paramters for airfoil.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#Basic-B-Spline","page":"Airfoil Generation","title":"Basic B-Spline","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The basic B-Spline parameterization comes from \"Universal Airfoil Parametrization Using B-Splines\" by Rajnarayan, Ning, and Mehr. It is a cubic B-Spline parameterization based on leading edge radius, trailing edge camber and wedge angle, and optional trailing edge gap distance.","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.BasicBSpline","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.BasicBSpline","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.BasicBSpline","text":"Fields:\n\nleading_edge_radius::Float : leading edge radius\ntrailing_edge_camber_angle::Float : trailing edge camber angle (angle of chordline from horizontal at trailing edge).\nwedge_angle::Float : Wedge angle (angle between upper and lower surfaces at trailing edge).\ntrailing_edge_gap::Float=0.0 : distance between upper and lower surfaces at trailing edge. A value of zero indicates a sharp trailing edge.\nthird_ctrlpt_position::Float=1.0/3.0 : the position of the third control point.  This is an inherent value in the parameterization and if changed, the other parameters will not behave as they are defined here.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"A basic B-Spline airfoil can be generated with","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.basic_bspline","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.basic_bspline","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.basic_bspline","text":"basic_bspline(parameters::BasicBSpline; N=160, split=false, return_nurbs=false)\n\nObtain airfoil coordinates from a B-Spline parameterization method.\n\nArguments:\n\nparameters::BasicBSpline : BasicBSpline parameters.\n\nKeyword Arguments:\n\nN::Integer=160 : number of points to use when defining the airfoil\nsplit::Bool : flag whether to output upper and lower coordinates separately\nreturn_nurbs::Bool : flag whether to output spline knots and control points as well\n\nReturns:\n\nif split=false\n\nx::AbstractArray{Float} : x-coordinates from lower TE clockwise to upper TE\nz::AbstractArray{Float} : z-coordinates from lower TE clockwise to upper TE\n\nif split=true\n\nxu::AbstractArray{Float} : array of x-coordinates for the upper half of the airfoil (LE to TE)\nzu::AbstractArray{Float} : array of z-coordinates for the upper half of the airfoil (LE to TE)\nxl::AbstractArray{Float} : array of x-coordinates for the lower half of the airfoil (LE to TE)\nzl::AbstractArray{Float} : array of z-coordinates for the lower half of the airfoil (LE to TE)\n\nif return_nurbs=true, also return:\n\nNURBSu::NURBS.NURBScurve : upper spline object\nNURBSl::NURBS.NURBScurve : lower spline object\n\n\n\n\n\ngbs(leading_edge_radius, trailing_edge_camber_angle, wedge_angle; perturbations=nothing, trailing_edge_gap=0, degree=3, third_ctrlpt_position=1/3, weights=nothing, split=false, return_nurbs=false)\n\nObtain airfoil coordinates from a B-Spline parameterization method.\n\nArguments:\n\nleading_edge_radius::Float : Leading Edge Radius\ntrailing_edge_camber_angle::Float : Trailing Edge Camber Angle (degrees)\nwedge_angle::Float : Wedge Angle (degrees)\n\nKeyword Arguments:\n\ntrailing_edge_gap::Float : Trailing Edge Gap\nthird_ctrlpt_position::Float : The x postion of the third control point.\nsplit::Bool : flag whether to output upper and lower coordinates separately\nreturn_nurbs::Bool : flag whether to output spline object\n\nReturns:\n\nif split=false\n\nx::AbstractArray{Float} : x-coordinates from lower TE clockwise to upper TE\nz::AbstractArray{Float} : z-coordinates from lower TE clockwise to upper TE\n\nif split=true\n\nxu::AbstractArray{Float} : array of x-coordinates for the upper half of the airfoil (LE to TE)\nzu::AbstractArray{Float} : array of z-coordinates for the upper half of the airfoil (LE to TE)\nxl::AbstractArray{Float} : array of x-coordinates for the lower half of the airfoil (LE to TE)\nzl::AbstractArray{Float} : array of z-coordinates for the lower half of the airfoil (LE to TE)\n\nif return_nurbs=true, also return:\n\nNURBSu::NURBS.NURBScurve : upper spline object\nNURBSl::NURBS.NURBScurve : lower spline object\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"","category":"page"},{"location":"AirfoilTools/parameterizations/#[Par](#)ametric-[Sec](#)tion-([PARSEC](#))","page":"Airfoil Generation","title":"Parametric Section (PARSEC)","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/#Standard","page":"Airfoil Generation","title":"Standard","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"The nominal PARSEC parameter type implemented is defined as","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.PARSEC","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.PARSEC","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.PARSEC","text":"Fields:\n\nleading_edge_radius::Float : leading edge radius\nmaximum_thickness_xu::Float : x-position of maximum thickness for upper side.\nmaximum_thickness_xl::Float : x-position of maximum thickness for lower side.\nmaximum_thickness_zu::Float : value of maximum thickness (from zero) for upper side.\nmaximum_thickness_zl::Float : value of maximum thickness (from zero) for lower side.\ncurvature_u::Float : curvature at point of maximum thickness on upper side.\ncurvature_l::Float : curvature at point of maximum thickness on lower side.\ntrailing_edge_angle::Float : angle from chordline to horizontal at trailing edge.\nboattail_angle::Float : angle from chordline to upper/lower surfaces (half of wedge angle).\ntrailing_edge_gap::Float=0.0 : total gap distance between upper and lower surfaces at treailing edge.\ntrailing_edge_z::Float=0.0 : z-position of midpoint between upper and lower surfaces at trailing edge.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"A PARSEC airfoil can be generated with","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.parsec","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.parsec","text":"parsec(p::PARSEC; N::Integer=80, split=false)\n\nCalculate the x,z airfoil coordinates for both top and bottom surfaces using standard PARSEC Parameterization method.\n\nUse parsec() for modified PARSEC implementation.\n\nArguments:\n\np::PARSEC : PARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_zu : z-coordinate at maximum thickness of upper side\nmaximum_thickness_zl : z-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_angle : trailing edge angle\nboattail_angle : boat-tail angle\ntrailing_edge_gap : z-position of center of trailing edge\ntrailing_edge_z : z-distance between upper and lower surface trailing edge points\n\nKeyword Arguments:\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\nparsec(p::AbstractArray{Float}; N::Integer=80, split=false)\n\nCalculate the x,z airfoil coordinates for both top and bottom surfaces using standard PARSEC Parameterization method.\n\nUse parsec() for modified PARSEC implementation.\n\nArguments:\n\np::AbstractArray{Float} : PARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_zu : z-coordinate at maximum thickness of upper side\nmaximum_thickness_zl : z-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_angle : trailing edge angle\nboattail_angle : boat-tail angle\ntrailing_edge_gap : z-position of center of trailing edge\ntrailing_edge_z : z-distance between upper and lower surface trailing edge points\n\nKeyword Arguments:\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"For a given set of x,z coordinates a best-fit PARSEC airfoil can be found using","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.determine_parsec","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_parsec","text":"determine_parsec(x,z)\n\nUses LsqFit to go from x-z coordinates to standard PARSEC parameters.\n\nReturns:\n\nparameters::PARSEC : an parameter object of type PARSEC\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#Modified","page":"Airfoil Generation","title":"Modified","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"Also implemented in AirfoilTools is a modified PARSEC parameterization that give direct control to the trailing edge surfaces of the upper and lower sides.  The ModifiedPARSEC type is defined as","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.ModifiedPARSEC","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.ModifiedPARSEC","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.ModifiedPARSEC","text":"Fields:\n\nleading_edge_radius::Float : leading edge radius\nmaximum_thickness_xu::Float : x-position of maximum thickness for upper side.\nmaximum_thickness_xl::Float : x-position of maximum thickness for lower side.\nmaximum_thickness_zu::Float : value of maximum thickness (from zero) for upper side.\nmaximum_thickness_zl::Float : value of maximum thickness (from zero) for lower side.\ncurvature_u::Float : curvature at point of maximum thickness on upper side.\ncurvature_l::Float : curvature at point of maximum thickness on lower side.\ntrailing_edge_tangent_u::Float : angle of surface at upper side trailing edge.\ntrailing_edge_tangent_l::Float : angle of surface at lower side trailing edge.\ntrailing_edge_zu::Float=0.0 : z-position of upper side trailing edge.\ntrailing_edge_zl::Float=0.0 : z-position of lower side trailing edge.\n\n\n\n\n\n","category":"type"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"A Modified PARSEC airfoil can be generated with","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.modified_parsec","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.modified_parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.modified_parsec","text":"parsec(p::ModifiedPARSEC; N::Int=80, split=false)\n\nCalculate the x,y airfoil coordinates for both top and bottom surfaces using modified PARSEC Parameterization method.\n\nUse parsec() for standard PARSEC implementation.  This modified version employs direct values for trailing edge position and angles for each surface.\n\nArguments:\n\np::ModifiedPARSEC : ModifiedPARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_zu : z-coordinate at maximum thickness of upper side\nmaximum_thickness_zl : z-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_tangent_u : trailing edge tangent angle of upper side\ntrailing_edge_tangent_l : trailing edge tangent angle of lower side\ntrailing_edge_zu : z-position of trailing edge of upper side\ntrailing_edge_zl : z-position of trailing edge of lower side\n\nKeyword Arguments:\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\nparsec(p::AbstractArray{Float}; N::Int=80, split=false)\n\nCalculate the x,y airfoil coordinates for both top and bottom surfaces using modified PARSEC Parameterization method.\n\nUse parsec() for standard PARSEC implementation.  This modified version employs direct values for trailing edge position and angles for each surface.\n\nArguments:\n\np::AbstractArray{Float} : ModifiedPARSEC paramters including:\nleading_edge_radius : Leading edge radius\nmaximum_thickness_xu : chordwise position of maximum thickness of upper side\nmaximum_thickness_xl : chordwise position of maximum thickness of lower side\nmaximum_thickness_zu : z-coordinate at maximum thickness of upper side\nmaximum_thickness_zl : z-coordinate at maximum thickness of lower side\ncurvature_u : second derivative of surface geometry at maximum thickness of upper side\ncurvature_l : second derivative of surface geometry at maximum thickness of lower side\ntrailing_edge_tangent_u : trailing edge tangent angle of upper side\ntrailing_edge_tangent_l : trailing edge tangent angle of lower side\ntrailing_edge_zu : z-position of trailing edge of upper side\ntrailing_edge_zl : z-position of trailing edge of lower side\n\nKeyword Arguments:\n\nN::Integer=80 : Number of x stations along chord\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns:\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"For a given set of x,z coordinates a best-fit Modified PARSEC airfoil can be found using","category":"page"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"AirfoilTools.determine_modified_parsec","category":"page"},{"location":"AirfoilTools/parameterizations/#FLOWFoil.AirfoilTools.determine_modified_parsec","page":"Airfoil Generation","title":"FLOWFoil.AirfoilTools.determine_modified_parsec","text":"determine_modified_parsec(x,z)\n\nUses LsqFit to go from x-z coordinates to modified ModifiedPARSEC parameters.\n\nReturns:\n\nparameters::ModifiedPARSEC : an parameter object of type ModifiedPARSEC\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/parameterizations/#Contributing","page":"Airfoil Generation","title":"Contributing","text":"","category":"section"},{"location":"AirfoilTools/parameterizations/","page":"Airfoil Generation","title":"Airfoil Generation","text":"We welcome the addition of other common parameterizations. Additions should have outputs consistent with current parameterizations.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#Basic-Tutorials","page":"Basic Examples","title":"Basic Tutorials","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"FLOWFoil includes various panel method implementations that are available based on the method keyword argument. Here we go over the available methods and their various options","category":"page"},{"location":"FLOWFoil/additional_tutorials/#Xfoil-Method","page":"Basic Examples","title":"Xfoil Method","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"An Xfoil-like method, actually based on mfoil can be accessed using the Mfoil method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"FLOWFoil.Mfoil","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.Mfoil","page":"Basic Examples","title":"FLOWFoil.Mfoil","text":"Mfoil <: Method\n\nFields:\n\nviscous::Bool : Flag whether to run an inviscid (false) or viscous (true) analysis.\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"Note that we have also set Xfoil=Mfoil so you can also use the Xfoil method type with identical results. Currently, this method only includes the inviscid parts of Xfoil/Mfoil.","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"using FLOWFoil\n\nx, y = AirfoilTools.naca4()\n\nangles_of_attack = range(-5.0, 15.0, step=1)\n\nmethod = Mfoil()\n\noutputs = AirfoilTools.analyze(x, y, angles_of_attack; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/#Lewis'-Method-for-Axisymmetric-Bodies","page":"Basic Examples","title":"Lewis' Method for Axisymmetric Bodies","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"A axisymmetric method based on that described by Lewis can be accessed using the Lewis method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"FLOWFoil.Lewis","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.Lewis","page":"Basic Examples","title":"FLOWFoil.Lewis","text":"Lewis <: Method\n\nFields:\n\nbody_of_revolution::AbstractVector{Bool} : Flag(s) whether bodies are bodies of revolutions or not (false indicates an annular airfoil)\n\nNote that if multiple bodies are used, the annular airfoil should come before the body of revolution.\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"using FLOWFoil\n\n# - DUCT - #\n\nx, r = AirfoilTools.naca4()\n\n# give the duct some diameter\nr .+= 1.0\n\n# indicate that the body is not a body of revolution (lying on the axis)\nmethod = Lewis(body_of_revolution = [false])\n\n# angle of attack defaults to zero, which is what we want for the axisymmetric case\noutputs = analyze(x, r; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"note: Note\nNo part of the geometry for an axisymmetric body can reside below z=0, otherwise an error will be thrown.","category":"page"},{"location":"FLOWFoil/additional_tutorials/#Martensen's-Method-for-Periodic-Bodies-(Cascades)","page":"Basic Examples","title":"Martensen's Method for Periodic Bodies (Cascades)","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"A periodic method for cascade analysis based on that developed by Martensen can be accessed using the Martensen method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"FLOWFoil.Martensen","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.Martensen","page":"Basic Examples","title":"FLOWFoil.Martensen","text":"Martensen{} <: Method\n\nFields:\n\ncascade::Bool=true : flag to apply cascade treatment or not\nsolidity::Float=0.0 : Ratio between airfoil chord length and pitch. Airfoil pitch is simply the distance between chordlines in the cascade.\nstagger::Float=0.0 : Angle (in radians) from axis of ration to airfoil chordline\ntransition_value::Float=Inf : pitchtochord ratio at which we stop applying cascade effects (Lewis uses 30 in his implementation)\ncurvature_correction::Bool=false : flag to apply curvature correction from Lewis\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"using FLOWFoil\n\n# - DUCT - #\n\nx, y = AirfoilTools.naca4(6,4,12)\n\ninflow_angles = range(-5.0, 15.0, step=1)\n\nmethod = Martensen(solidity=0.5, stagger=30.0*pi/180.0)\n\noutputs = analyze(x, y, inflow_angles; method=method)","category":"page"},{"location":"FLOWFoil/additional_tutorials/#Hess-Smith-2D-Method-for-Educational-Purposes","page":"Basic Examples","title":"Hess-Smith 2D Method for Educational Purposes","text":"","category":"section"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"We also have a version of the Hess-Smith method primarily for educational use that can be accessed with the HessSmith method type:","category":"page"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"FLOWFoil.HessSmith","category":"page"},{"location":"FLOWFoil/additional_tutorials/#FLOWFoil.HessSmith","page":"Basic Examples","title":"FLOWFoil.HessSmith","text":"HessSmith <: Method\n\n\n\n\n\n","category":"type"},{"location":"FLOWFoil/additional_tutorials/","page":"Basic Examples","title":"Basic Examples","text":"using FLOWFoil\n\n# - DUCT - #\n\nx, y = AirfoilTools.naca4(6,4,12)\n\nangles_of_attack = range(-5.0, 15.0, step=1)\n\nmethod = HessSmith()\n\noutputs = analyze(x, y, angles_of_attack; method=method)","category":"page"},{"location":"AirfoilTools/api/#Public","page":"API Reference","title":"Public","text":"","category":"section"},{"location":"AirfoilTools/api/","page":"API Reference","title":"API Reference","text":"Modules = [AirfoilTools]\nOrder = [:type,:function]","category":"page"},{"location":"AirfoilTools/api/#Private","page":"API Reference","title":"Private","text":"","category":"section"},{"location":"AirfoilTools/api/","page":"API Reference","title":"API Reference","text":"Modules = [AirfoilTools]\nOrder = [:type, :function]\nPublic = false","category":"page"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.bernstein-Tuple{Any, Any, Any}","page":"API Reference","title":"FLOWFoil.AirfoilTools.bernstein","text":"bernstein(r, n, x)\n\nBernstein Basis Function: binomial(n, r) .* x .^ r .* (1 .- x) .^ (n .- r)\n\n\n\n\n\n","category":"method"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.calculate_modified_parsec_coefficients","page":"API Reference","title":"FLOWFoil.AirfoilTools.calculate_modified_parsec_coefficients","text":"calculate_modified_parsec_coefficients(p, uppper_side)\n\nCalculate the PARSEC coefficients using modified parameters (see parsec() docstring) for either the top or bottom curve.\n\nArguments:\n\np::NamedTuple : Named tuple of ModifiedPARSEC paramters including:\nleading_edge_radius::Float : Leading edge radius\nmaximum_thickness_x::Float : chordwise position of maximum thickness\nmaximum_thikcness_z::Float : z-coordinate at maximum thickness\ncurvature::Float : second derivative of surface geometry at maximum thickness\ntrailing_edge_tangent::Float : trailing edge tangent angle, radians\ntrailing_edge_z::Float : z-position of trailing edge\nside::Number : +1 for upper side, -1 for lower side\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.calculate_parsec_coefficients","page":"API Reference","title":"FLOWFoil.AirfoilTools.calculate_parsec_coefficients","text":"calculate_parsec_coefficients(p, side=1)\n\nCalculate the PARSEC coefficients using standard parameters (see parsec() docstring) for either the top or bottom curve.\n\nArguments:\n\np::NamedTuple : NamedTuple of PARSEC standard paramters including:\n[1]: leading_edge_radius : Leading edge radius\n[2]: X : chordwise position of maximum thickness\n[3]: Z : z-coordinate at maximum thickness\n[4]: curvature : second derivative of surface geometry at maximum thickness\n[5]: trailing_edge_angle : trailing edge angle\n[6]: boattail_angle : boat-tail angle\n[7]: trailing_edge_gap : z-distance between upper and lower surface trailing edge points\n[8]: trailing_edge_z : z-position of center of trailing edge\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.definespline-NTuple{5, Any}","page":"API Reference","title":"FLOWFoil.AirfoilTools.definespline","text":"definespline()\n\nCalculate the x and y location of the control points, and weight them according to the weighting vector. Also, provide generic knot vectors.\n\nInputs:\n\nthirdctrlptposition : x position of the 2nd and 6th control points in degree 3.\nleadingedgeradius : Leading edge radius\nwedge_angle : The trailing edge wedge angle\ntrailingedgegap : The trailing edge gap\nweights : vector weights for the control points, leave empty for unity.\n\nKeyword Arguments:\n\nOutputs:\n\nknots : the knot vector of the curve\ncontrolpoints : control point vector (x,y,w)\n\n\n\n\n\n","category":"method"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.get_spline_coordinates-Tuple{Any}","page":"API Reference","title":"FLOWFoil.AirfoilTools.get_spline_coordinates","text":"    get_spline_coordinates()\n\nGet plotable coordinates from the weighted control points.\n\nArguments:\n\nknots::AbstractArray{Float} : knot vector\ncontrolpoints::AbstractArray{Float,2}: Control Point matrix\ndegree::Int : degree of the NURBS curve\n\nKeyword Arguments:\n\nN::Int : number of coordinates, or panels that will be generated\n\nReturns:\n\nx::AbstractArray{Float} : x Airfoil coordinates\nz::AbstractArray{Float} : z Airfoil coordinates\n\n\n\n\n\n","category":"method"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.half_cst","page":"API Reference","title":"FLOWFoil.AirfoilTools.half_cst","text":"half_cst(coefficients, x=cosine_spacing(N), dz=0.0, N1=0.5, N2=1.0)\n\nDefine upper or lower side of airfoil using CST parameterization.\n\nArguments:\n\ncoefficients::AbstractArray{Float} : Vector of CST coefficients.\n\nKeyword Arguments:\n\ndz::Float=0.0 : trailing edge gap\nN1::Float=0.5 : Class shape parameter 1\nN2::Float=1.0 : Class shape parameter 2\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.joukowsky_flow-NTuple{4, Any}","page":"API Reference","title":"FLOWFoil.AirfoilTools.joukowsky_flow","text":"joukowsky_flow(center, radius, alpha, vinf; N=361)\n\nCalculate the analytic surface velocities and pressures as well as lift coefficient for a joukowsky airfoil.\n\nArguments:\n\ncenter::AbstractArray{Float} : [x z] location of circle center relative to origin\nradius::Float : Radius of circle\nalpha::Float : Angle of attack in degrees\nvinf::Float : Freestream velocity\n\nKeyword Arguments:\n\nN::Int : Total number of coordinates to use. Can be even or odd, but it is recommended to be odd for a clear leading edge point.\n\nReturns:\n\nvsurf::AbstractArray{Float} : Magnitude of surface velocities at the nodes\ncpsurf::AbstractArray{Float} : Surface pressures at the nodes\ncl::Float : Lift coefficient\n\n\n\n\n\n","category":"method"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.naca4_camber-Tuple{Any, Any, Any}","page":"API Reference","title":"FLOWFoil.AirfoilTools.naca4_camber","text":"naca4_camber(x, max_camber, max_camber_pos)\n\nCompute camber at a given chord-normalized x-position by NACA 4-series camber equations.\n\nArguments:\n\nx::Float : x position along chordline\nmax_camber::Float64 : Maximum camber value\nmax_camber_pos::Float64 : Position of maximum camber\n\n\n\n\n\n","category":"method"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.naca4_thickness-Tuple{Any, Any}","page":"API Reference","title":"FLOWFoil.AirfoilTools.naca4_thickness","text":"naca4_thickness(x, maxthick; blunt_te=false)\n\nCompute thickness at a given chord-normalized x-position by NACA 4-series thickness equations.\n\nArguments:\n\nx::Float : x position along chordlin, markersize=3, markershape=:squaree\nmaxthick::Float : Maximum thickness value\n\nKeyword Arguments:\n\nblunt_te::Bool : Flag whether trailing edge is blunt or not\n\n\n\n\n\n","category":"method"},{"location":"AirfoilTools/api/#FLOWFoil.AirfoilTools.z_from_parsec_coefficients","page":"API Reference","title":"FLOWFoil.AirfoilTools.z_from_parsec_coefficients","text":"z_from_parsec_coefficients(a, N::Int=80)\n\nCalculate the x,z airfoil coordinates using the PARSEC polynomial.\n\nArguments:\n\na::AbstractArray{Float} : the PARSEC coefficients.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Airfoil-Geometry-Manipulation-Tools","page":"Airfoil Manipulation","title":"Airfoil Geometry Manipulation Tools","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"Here we include the variety of methods for manipulating airfoil geometries in useful ways implemented in AirfoilTools.","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#Deconstruction","page":"Airfoil Manipulation","title":"Deconstruction","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"AirfoilTools.split_upper_lower","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.split_upper_lower","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.split_upper_lower","text":"split_upper_lower(x, z; idx::Integer=nothing)\n\nSplit the upper and lower halves of the airfoil coordinates.\n\nAssumes leading edge point is at first minimum x value if idx is not provided. Returns the upper and lower coordinates each with the leading edge point. Assumes airfoil is defined clockwise starting at the trailing edge.\n\nArguments:\n\nx::AbstractArray{Float} : Vector of x coordinates\nz::AbstractArray{Float} : Vector of z coordinates\n\nKeyword Arguments:\n\nidx::Integer : optional index at which to split the coordinates\n\nReturns:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates\nxu::AbstractArray{Float} : Vector of upper half of x coordinates\nzl::AbstractArray{Float} : Vector of lower half of z coordinates\nzu::AbstractArray{Float} : Vector of upper half of z coordinates\n\n\n\n\n\nsplit_upper_lower(coordaintes; idx::Integer=nothing)\n\nSplit the upper and lower halves of the airfoil coordinates.\n\nAssumes leading edge point is at first minimum x value if idx is not provided. Returns the upper and lower coordinates each with the leading edge point. Assumes airfoil is defined clockwise starting at the trailing edge.\n\nArguments:\n\ncoordinates::Matrix{Float} : Matrix of [x z] coordinates\n\nKeyword Arguments:\n\nidx::Integer : optional index at which to split the coordinates\n\nReturns:\n\nxl::AbstractArray{Float} : View of lower half of x coordinates\nxu::AbstractArray{Float} : View of upper half of x coordinates\nzl::AbstractArray{Float} : View of lower half of z coordinates\nzu::AbstractArray{Float} : View of upper half of z coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Transformation","page":"Airfoil Manipulation","title":"Transformation","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"AirfoilTools.flip!\nAirfoilTools.zero_z_te!\nAirfoilTools.rotate_coordinates!\nAirfoilTools.normalize_coordinates!\nAirfoilTools.position_coordinates!","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.flip!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.flip!","text":"flip!(x)\n\nFlips one dimension of airfoil coordinates.\n\nMoves airfoil left (x) or down (z) by maximum x or z coordinate then flips about the z or x axis, respectively.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.zero_z_te!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.zero_z_te!","text":"zero_z_te!(x,y)\n\nPlaces trailing edge on the x-axis.\n\nArguements:\n\ncoordinates::Array{Float} : Array of [x z] coordinates to be updated in place.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.rotate_coordinates!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.rotate_coordinates!","text":"rotate_coordinates!(coordinates, angle; rotation_point=[0.0; 0.0])\n\nRotate coordiantes clockwise about rotation_point by angle in degrees.\n\nArguements:\n\ncoordinates::Array{Float} : Array of [x z] coordinates to be updated in place.\nangle::Float=0.0 : Angles, in degrees, by which to rotate the coordinates clockwise (positive angle will pitch airfoil up).\n\nKeyword Arguements:\n\nrotation_point::AbstractArray{Float}=[0.0; 0.0] : Array of [x z] position of point about which to perform rotation.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.normalize_coordinates!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.normalize_coordinates!","text":"normalize_coordinates!(coordinates)\n\nNormalize airfoil to unit chord and shift leading edge to zero. Adjusts coordinates in place.\n\nArguments:\n\ncoordinates::Array{Float} : Array of [x z] coordinates\n\n\n\n\n\nnormalize_coordinates!(x, z)\n\nNormalize airfoil to unit chord and shift leading edge to zero. Adjusts coordinates in place.\n\nArguments:\n\nx::Array{Float} : Array of x coordinates\nz::Array{Float} : Array of z coordinates\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.position_coordinates!","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.position_coordinates!","text":"position_coordinates!(coordinates, scale, angle, location)\n\nScale, Rotate, and Transform (in that order) airfoil coordinates.\n\nArguments:\n\ncoordinates::Array{Float} : Array of [x z] coordinates to be updated in place.\n\nKeyword Arguments:\n\nscale::Float=1.0 : Value by which to scale coordinates.\nangle::Float=0.0 : Angles, in degrees, by which to rotate the coordinates clockwise (positive angle will pitch airfoil up).\nlocation::AbstractArray{Float}=[0.0; 0.0] : Array of [x z] position of leading edge location.\nrotation_point::AbstractArray{Float}=[0.0; 0.0] : Array of [x z] position of point about which to perform rotation.\nflipped::Bool : flag whether to flip airfoil upside down.\n\nReturns:\n\nx::Array{Float} : array of x-coordinates\nz::Array{Float} : array of z-coordinates\n\n\n\n\n\nposition_coordinates!(\n    coordinates::Vector{AbstractArray{TF}};\n    scales=[1.0],\n    angles=[0.0],\n    locations=[[0.0; 0.0],],\n    rotation_points=[[0.0; 0.0],],\n    flipped=[false],\n) where {TF}\n\nMulti-airfoil version of position_coordinates!.\n\nIf keyword arguments are give as single valued vectors, the same values are used for all coordinate sets. If keyword arguments are provided as vectors of length greater than 1, they must have the same length as the set of coordinates. For example, if scaling 3 airfoils, there will be a vector of 3 airfoil coordinate sets input and scales must either be a one element vector or a vector of length 3.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Re-definition","page":"Airfoil Manipulation","title":"Re-definition","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"AirfoilTools.whole_cosine_spacing\nAirfoilTools.split_cosine_spacing\nAirfoilTools.repanel_airfoil\nAirfoilTools.refine_trailing_edge","category":"page"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.whole_cosine_spacing","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.whole_cosine_spacing","text":"whole_cosine_spacing(N::Integer=160)\n\nReturns cosine spaced x coordinates from 1 to 0 back to 1.\n\nArguments:\n\nN::Integer : Total number of points is N+1.\n\nReturns:\n\nx::AbstractArray{Float} : cosine spaced x-coordinates, starting at 1.0, going to 0.0, then back to 1.0.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.split_cosine_spacing","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.split_cosine_spacing","text":"whole_cosine_spacing(N::Integer=160)\n\nReturns cosine spaced x coordinates from 0 to 1.\n\nArguments:\n\nN::Integer : Number of points.\n\nReturns:\n\nx::AbstractArray{Float} : cosine spaced x-coordinates, starting at 0.0 ending at 1.0.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.repanel_airfoil","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.repanel_airfoil","text":"repanel_airfoil(x, z; N=160)\n\nRepanels airfoil coordinates using Akima splines with N coordinate points.\n\nArguments\n\nx::AbstractArray{Float} : vector containing the x coordinates of the airfoil\nz::AbstractArray{Float} : vector containing the z coordinates of the airfoil\n\nKeyword Arguements\n\nN::Int : Number of data points to be returned after repaneling. Will only return odd numbers, if N is even, N+1 points will be returned.\n\nReturns\n\nrepaneled_x::AbstractArray{Float} : Repaneled, cosine spaced x corrdinates of the airfoil\nrepaneled_z::AbstractArray{Float} : z coordinates of the repaneled airfoil obtained using an akima spline\n\n\n\n\n\nrepanel_airfoil(coordinates; N=160)\n\nRepanels airfoil coordinates using Akima splines with N coordinate points.\n\nArguments:\n\ncoordinates::Arraz{Float} : Arraz of [x z] coordinates\n\nKeyword Arguements:\n\nN::Int=160 : Number of data points to be returned after repaneling. Will only return odd numbers, if N is even, N+1 points will be returned.\n\nReturns:\n\nrepaneled_coordinates::Arraz{Float} : new coordinate arraz.\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#FLOWFoil.AirfoilTools.refine_trailing_edge","page":"Airfoil Manipulation","title":"FLOWFoil.AirfoilTools.refine_trailing_edge","text":"refine_trailing_edge(x, z)\n\nAdds points along the trailing edge of an airfoil.\n\n\n\n\n\nrefine_trailing_edge(x, z, N::Integer)\n\nAdds points along the trailing edge of an airfoil\n\n\n\n\n\n","category":"function"},{"location":"AirfoilTools/geometry_manipulations/#Contributing","page":"Airfoil Manipulation","title":"Contributing","text":"","category":"section"},{"location":"AirfoilTools/geometry_manipulations/","page":"Airfoil Manipulation","title":"Airfoil Manipulation","text":"We welcome the addition of more convenience functions for airfoil geometry manipulation.","category":"page"},{"location":"AirfoilTools/intro/#Airfoil-Tools","page":"Intro","title":"Airfoil Tools","text":"","category":"section"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"AirfoilTools is a submodule of FLOWFoil containing useful airfoil geometry generation and manipulation routines that are commonly used in the BYU FLOW Lab.","category":"page"},{"location":"AirfoilTools/intro/#Contribution","page":"Intro","title":"Contribution","text":"","category":"section"},{"location":"AirfoilTools/intro/","page":"Intro","title":"Intro","text":"We welcome additional airfoil parameterization methods as well as convenient geometry manipulation routines that make life easier when working with airfoil analysis and optimization.","category":"page"},{"location":"FLOWFoil/examples/#Advanced-Examples:-Verification-and-Validation","page":"Additional Examples","title":"Advanced Examples: Verification and Validation","text":"","category":"section"},{"location":"FLOWFoil/examples/#Mfoil:-Single-inviscid-airfoil-comparision-to-analytic-solution","page":"Additional Examples","title":"Mfoil: Single inviscid airfoil comparision to analytic solution","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"TODO: add comparison with Joukowsky airfoil used in XFoil paper:","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\ncenter = [-0.1; 0.1]\nR = 1.0\nalpha = 4.0\n\n# get joukowsky coordinates from AirfoilTools\n\n# run joukowsky solution from AirfoilTools\n\n# run analyze function\n\n# plot and save comparision, but hide the code","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"TODO: add comparision figure for single joukowsky airfoil here","category":"page"},{"location":"FLOWFoil/examples/#Mfoil:-Multiple-inviscid-airfoil-comparison-to-analytic-solution","page":"Additional Examples","title":"Mfoil: Multiple inviscid airfoil comparison to analytic solution","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"For a multi-element airfoil system, the procedure is identical to a single body system, except we input a vector of matrices for the coordinates of the various bodies. For this case, we'll use data that comes from \"An Exact Test Case for the Plane Potential Flow About Two Adjacent Lifting Aerofoils\" by B. R. Williams.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\n# SET UP GEOMETRY\naf_geom_path = normpath(joinpath(splitdir(pathof(FLOWFoil))[1], \"..\", \"docs\", \"src\", \"assets\", \"two_inviscid_airfoils.jl\"))\ninclude(af_geom_path)\n\noutputs = analyze([[ximain etamain], [xiflap etaflap]]; method=Mfoil(inviscid=true)\n\nplot and save comparisons, hiding code\n\nnothing #hide","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"We see excellent agreement with the analytical solution.","category":"page"},{"location":"FLOWFoil/examples/#Advanced-Viscous-Airfoil-Options","page":"Additional Examples","title":"Advanced Viscous Airfoil Options","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"TODO: explain the various advanced options (ncrit, forced transition, etc)","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"","category":"page"},{"location":"FLOWFoil/examples/#Axisymmetric-Body-of-Revolution","page":"Additional Examples","title":"Axisymmetric Body of Revolution","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"For this example, we use data from chapter 4 of \"Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems\" by  R. I. Lewis","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\nbor_path = normpath(joinpath(splitdir(pathof(FLOWFoil))[1], \"..\", \"test\", \"data\", \"bodyofrevolutioncoords.jl\"))\ninclude(bor_path)\n\noutputs = analyze(center_body_coordinates; method = Lewis(body_of_revolution=[true]))\n\n# plot # hide\ninclude(\"../assets/plots_default.jl\")\nplot(xlabel=L\"\\frac{x}{c}\", ylabel=L\"\\frac{V_s}{V_\\infty}\")\nplot!(Vs_over_Vinf_x, Vs_over_Vinf_vs, seriestype=:scatter, label=\"Experimental Data\",markerstrokecolor=1, markercolor=1, markersize=4) #hide\nplot!(0.5*(center_body_coordinates[1:end-1,1].+center_body_coordinates[2:end,1]), outputs.tangential_velocities[1], label=\"FLOWFoil\") #hide","category":"page"},{"location":"FLOWFoil/examples/#Axisymmetric-Annular-Airfoil-(Duct)","page":"Additional Examples","title":"Axisymmetric Annular Airfoil (Duct)","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"If we define an airfoil shape in an axisymmetric scheme, we model an annular airfoil, or in other words, a duct.  To do so, we follow a similar procedure to bodies of revolution with the exception that we set body_of_revolution=false.","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\nduct_path = normpath(joinpath(splitdir(pathof(FLOWFoil))[1], \"..\", \"test\", \"data\", \"naca_662-015.jl\"))\ninclude(duct_path)\n\noutputs = analyze(duct_coordinates; method = Lewis(body_of_revolution=[false]))\n\n# plot # hide\nplot(xlabel=L\"\\frac{x}{c}\", ylabel=L\"c_p\") #hide\nplot!(pressurexupper, pressureupper, seriestype=:scatter, markershape=:utriangle, label=\"Experimental Nacelle\", color=1, yflip=true, markerstrokecolor=1, markercolor=1, markersize=4) #hide\nplot!(pressurexlower, pressurelower, seriestype=:scatter, markershape=:dtriangle, label=\"Experimental Casing\", color=1, markerstrokecolor=1, markercolor=1, markersize=4) #hide\nplot!(0.5*(duct_coordinates[1:end-1,1].+duct_coordinates[2:end,1]), outputs.surface_pressures[1], label=\"FLOWFoil\",color=2) #hide","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"As above, we plot experimental results along with our calculated values.","category":"page"},{"location":"FLOWFoil/examples/#Axisymmetric-Mutli-element-Systems","page":"Additional Examples","title":"Axisymmetric Mutli-element Systems","text":"","category":"section"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"As an example of an multi-element axisymmetric system (such as that used for a ducted rotor), we will simply combine the two previous cases. Note that we include the coordinates for the various bodies as a tuple of matrices, and in this case, we need to indicate in the Lewis method fields which of the bodies is a body of revolution (currently, the method only works if the annular airfoil comes first).","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"using FLOWFoil\n\noutputs = analyze(\n    (duct_coordinates, center_body_coordinates);\n    method=Lewis(; body_of_revolution=[false, true]),\n)\n\n# plot v # hide\nplot(xlabel=L\"\\frac{x}{c}\", ylabel=L\"\\frac{V_s}{V_\\infty}\") #hide\nplot!(Vs_over_Vinf_x, Vs_over_Vinf_vs, seriestype=:scatter, label=\"Experimental Center Body\",markerstrokecolor=1, markercolor=1, markersize=4) #hide\nplot!(0.5*(center_body_coordinates[1:end-1,1].+center_body_coordinates[2:end,1]), outputs.tangential_velocities[2], label=\"FLOWFoil Center Body with Duct Effects\") #hide","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"# plot cp # hide\nplot(xlabel=L\"\\frac{x}{c}\", ylabel=L\"c_p\") #hide\nplot!(pressurexupper, pressureupper, seriestype=:scatter, markershape=:utriangle, label=\"Experimental Nacelle\", color=1, yflip=true, markerstrokecolor=1, markercolor=1, markersize=4) #hide\nplot!(pressurexlower, pressurelower, seriestype=:scatter, markershape=:dtriangle, label=\"Experimental Casing\", color=1, markerstrokecolor=1, markercolor=1, markersize=4) #hide\nplot!(0.5*(duct_coordinates[1:end-1,1].+duct_coordinates[2:end,1]), outputs.surface_pressures[1], label=\"FLOWFoil Duct with Center Body Effects\",color=2) #hide","category":"page"},{"location":"FLOWFoil/examples/","page":"Additional Examples","title":"Additional Examples","text":"Plotting the geometry and the output velocities and pressures show expected behavior when combining these two cases.","category":"page"},{"location":"FLOWFoil/tutorial/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"Running FLOWFoil can be done simply with a single method: analyze","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.analyze","category":"page"},{"location":"FLOWFoil/tutorial/#FLOWFoil.analyze","page":"Quick Start","title":"FLOWFoil.analyze","text":"analyze(coordinates, flow_angles=0.0, reynolds=1e6, machs=0.0; method::Method=Mfoil())\nanalyze(x, y, flow_angles=0.0, reynolds=1e6, machs=0.0; method::Method=Mfoil())\n\nConvenience function for setting up, solving, and post-processing airfoils and airfoil systems.\n\nRequired Arguments:\n\ncoordinates::NTuple{Matrix{Float}} : Tuple of [x y] matrices of airfoil coordinates (may be a single matrix as well)\n\nOR\n\nx::Vector{Float} : Vector of x-coordinates of airfoil geometry\ny::Vector{Float} : Vector of y-coordinates of airfoil geometry\n\nNote that inputting separate vectors for airfoil coordinates is only available for analysis of single airfoils/bodies.  Multi-airfoil/body systems require the use of a tuple of matrices for coordinate inputs.\n\nOptional Arguments:\n\nflow_angles::Vector{Float}=0.0 : Vector of angles of attack (may be a single float as well)\nreynolds::Vector{Float}=1e-6 : Vector of reynolds numbers (may be a single float as well)\nmachs::Vector{Float}=0.0 : Vector of machs numbers (may be a single float as well)\n\nNote that Reynolds and Mach numbers are only used for viscous methods, and Flow Angles are unused in the axisymmetric methods.\n\nKeyword Arguments:\n\nmethod::Method=Mfoil() : desired method for solving\n\nReturns:\n\noutputs::NTuple : named tuple with outputs.  Nominally contains\ncl: lift coefficient of each body\ncd: total drag coefficient of each body\ncdp: profile drag coefficient of each body\ncm: moment coefficient of each body\ntangential_velocities: surface velocities on each body\nsurface_pressures: surface pressures on each body\nconvergenced: convergence flag\nauxiliary outputs: a named tuple that contains additional outputs applicable to the method used.\n\n\n\n\n\n","category":"function"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"As an introductory example, we will do a quick analysis of a NACA 2412 airfoil, with coordinates from one of the available methods in the Airfoil Tools sub-module.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"note: Note\nFor any airfoil coordinate generation method (from FLOWFoil or otherwise), the coordinates must start at the trailing edge, and proceed clockwise around the airfoil. For axisymmetric bodies of revolution, coordiantes should also proceed clockwise, starting at the leading edge.","category":"page"},{"location":"FLOWFoil/tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\n\n# 2412 is default\nx, y = AirfoilTools.naca4()\n\n# choose one or more angles of attack\nangles_of_attack = range(-5.0, 15.0, step=1)\n\noutputs = analyze(x, y, angles_of_attack)","category":"page"},{"location":"#FLOWFoil","page":"Home","title":"FLOWFoil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Authors: Judd Mehr,","category":"page"},{"location":"","page":"Home","title":"Home","text":"FLOWFoil is a two dimensional potential flow solver (panel method) for airfoils, airfoil systems, and axisymmetric sections/systems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The formulation used for the planar (airfoils) systems in FLOWFoil follows closely those of XFoil and mfoil (see also references below).","category":"page"},{"location":"","page":"Home","title":"Home","text":"For axisymmetric sections (bodies of revolution, ducts) and systems, FLOWFoil follows closely the formulations laid out in Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems (which also appear to be similar to the methods applied in the Ducted Fan Design Code, a program used for analysis of low Reynolds number ducted rotors).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, FLOWFoil only has inviscid capabilties for single and multi-element systems. Future additions will include visous capabilties for both single and multi-element airfoils as well.","category":"page"},{"location":"#References:","page":"Home","title":"References:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Drela, M., “XFOIL: An Analysis and Design System for Low Reynolds Number Airfoils,” 1989.\nFidkowski, K. J., “A Coupled Inviscid-Viscous Airfoil Analysis Solver, Revisited,” AIAA Journal, 2021.\nR. I. Lewis, \"Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems,\" 1991","category":"page"},{"location":"FLOWFoil/theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"FLOWFoil/theory/","page":"Theory","title":"Theory","text":"As the current implementations follow very closely those presented in the links below, we encourage interested parties to read through Drela, M., “XFOIL: An Analysis and Design System for Low Reynolds Number Airfoils,” 1989. and Fidkowski, K. J., “A Coupled Inviscid-Viscous Airfoil Analysis Solver, Revisited,” AIAA Journal, 2021. for the theory behind the 2D airfoil analysis methods.","category":"page"},{"location":"FLOWFoil/theory/","page":"Theory","title":"Theory","text":"For those interested in the theory for the axisymmetric solver methods to see R. I. Lewis, \"Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems,\" 1991–-specifically chapter 4.","category":"page"}]
}
