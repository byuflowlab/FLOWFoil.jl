var documenterSearchIndex = {"docs":
[{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Additional Types and Functions not already shown in other parts of the documentation.","category":"page"},{"location":"reference/#Public","page":"API Reference","title":"Public","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"reference/#Private","page":"API Reference","title":"Private","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"CurrentModule = FLOWFoil","category":"page"},{"location":"#FLOWFoil","page":"Intro","title":"FLOWFoil","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"FLOWFoil is a two dimensional potential flow solver (panel method) for airfoils, airfoil systems, and axisymmetric sections/systems.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"The formulation used for the planar (airfoils) systems in FLOWFoil follows closely those of XFoil and mfoil (see also references below).","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"For axisymmetric sections (bodies of revolution, ducts) and systems, FLOWFoil follows closely the formulations laid out in Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems (which also appear to be similar to the methods applied in the Ducted Fan Design Code, a program used for analysis of low Reynolds number ducted rotors).","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"Currently, FLOWFoil only has inviscid capabilties for single and multi-element systems. Future additions will include visous capabilties for both single and multi-element airfoils as well.","category":"page"},{"location":"#References:","page":"Intro","title":"References:","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"Drela, M., “XFOIL: An Analysis and Design System for Low Reynolds Number Airfoils,” 1989.\nFidkowski, K. J., “A Coupled Inviscid-Viscous Airfoil Analysis Solver, Revisited,” AIAA Journal, 2021.\nR. I. Lewis, \"Vortex Element Methods for fluid Dynamic Analysis of Engineering Systems,\" 1991","category":"page"},{"location":"tutorial/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil is structured as follows:","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"The user generates a Problem.\nThe Problem is solved, generating a Solution.\nThe Solution is post-processed, generating a Polar.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"There are also some included convenience functions for geometry generation and manipulation.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"","category":"page"},{"location":"tutorial/#Single-Airfoil-Inviscid-Solution","page":"Quick Start","title":"Single Airfoil Inviscid Solution","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Let's first look at the simplest case, a single inviscid airfoil. We'll first set up the geometry, then define the problem, then solve the problem, then post process it, and finally plot some of the outputs.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\nusing PyPlot","category":"page"},{"location":"tutorial/#Geometry-Definition","page":"Quick Start","title":"Geometry Definition","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"For this example, we'll use one of the airfoil parameterization convenience functions to generate the x,z coordinates of an arbitrary Joukowsky airfoil. FLOWFoil includes several such convenience functions, which you can find more information on the API Reference page.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- SET UP GEOMETRY\n\n# arbitrarily pick some joukowsky airfoil parameters\ncenter = [-0.1; 0.1]\nradius = 1.0\nnum_nodes = 160\n\n# get airfoil coordinates for joukowsky airfoil\nx, z = FLOWFoil.joukowsky(center, radius; N=num_nodes)\n\n# get analytic joukowsky solution for later, using alpha=4 and vinf = 1.0\nvj, cpj, clj = FLOWFoil.joukowskyflow(center, radius, 4.0, 1.0; N=num_nodes)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"note: Note\nFor any airfoil coordinate generation method (from FLOWFoil or otherwise), the coordinates must start at the trailing edge, and proceed clockwise around the airfoil.","category":"page"},{"location":"tutorial/#Generate-Meshes","page":"Quick Start","title":"Generate Meshes","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"We'll next take that geometry and create a simple mesh object that holds the coordinates as well as pertinent information regarding the trailing edge.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.generate_mesh","category":"page"},{"location":"tutorial/#FLOWFoil.generate_mesh","page":"Quick Start","title":"FLOWFoil.generate_mesh","text":"generate_mesh(x, y; chordlength, wakelength)\n\nCreate panels from input geometry coordinates.\n\nArguments:\n\nx::Vector{Float} : x coordinates defining airfoil geometry.\ny::Vector{Float} : y coordinates defining airfoil geometry.\n\nKeyword Arguments:\n\ngaptolerance::Float : Tolerance for how close, relative to the chord, the trailing edge nodes can be before being considered a sharp trailing edge. (default = 1e-10)\n\nReturns\n\nmesh::PlanarMesh : Geometry mesh, including panel nodes and trailing edge condition.\n\n\n\n\n\ngenerate_mesh(coordinates; kwargs)\n\nIdentical to implementation with x and y separate, but here with x,y coordinates together in a single array [X Y].\n\nArguments:\n\ncoordinates::Array{Float,2} : array of both x and y coordinates (x first column, y second column).\n\n\n\n\n\n","category":"function"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"# generate mesh object\nmeshes = [FLOWFoil.generate_mesh([x z])]","category":"page"},{"location":"tutorial/#Define-Problem","page":"Quick Start","title":"Define Problem","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"We'll define a problem using the mesh array we just created, and indicate that we want to solve the inviscid problem by setting the viscous keyword argument to false. The problem object is very simple in the inviscid case, but carries more information about the freestream for the viscous problem (not yet implemented)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.Problem(meshes, angleofattack=0.0, reynolds=0.0, mach=0.0; viscous=true, verbose=false, debug=false)","category":"page"},{"location":"tutorial/#FLOWFoil.Problem","page":"Quick Start","title":"FLOWFoil.Problem","text":"Problem(meshes, angleofattack=0.0, reynolds=0.0, mach=0.0; viscous=true, verbose=false)\n\nConstructor for Problem Objects.\n\nArguments:\n\nmeshes::Array{PlanarMesh or AxiSymMesh} : Array of mesh objects\nangleofattack::Float : Angle of Attack (currently unused)\nreynolds::Float : Reynolds Number (currently unused)\nmach::Float : Mach Number (currently unused)\n\nKeyword Arguments:\n\nviscous::Bool : Flag to solve viscous or inviscid only\naxisymmetric::Bool : Flag for axisymmetric solver.\nverbose::Bool : Flag to print out verbose statements\n\n\n\n\n\n","category":"type"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- DEFINE PROBLEM\nproblem = FLOWFoil.Problem(meshes; viscous=false)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"note: Note\nEven for single mesh objects, the meshes argument provided to the Problem constructor needs to be in an array.","category":"page"},{"location":"tutorial/#Solve-Problem","page":"Quick Start","title":"Solve Problem","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"To solve the problem, we simply call the solve function, which will select the appropriate solver based on the viscous field in the problem. The solver returns a solution object, which nominally contains the vortex strengths and constant freestream strength on each node, as well as the mesh objects used in the solution, and some book keeping items from multi-element analyses.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.solve","category":"page"},{"location":"tutorial/#FLOWFoil.solve","page":"Quick Start","title":"FLOWFoil.solve","text":"solve(problem)\n\nSolve problem defined by the input Problem object and return the solution in a Solution object.\n\nArguments:\n\nproblem::Problem : Problem to solve\n\nReturns:\n\nsolution::{InviscidSolution or ViscousSolution} : returns solution of type matching viscous flag in problem.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- SOLVE PROBLEM\ninviscid_solution = FLOWFoil.solve(problem)","category":"page"},{"location":"tutorial/#Post-Process","page":"Quick Start","title":"Post Process","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"With the solution calculated, we can post process by providing the angle of attack at which we want to know the various airfoil coefficients includeing lift and moment, as well as surface velocity and pressure distributions.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.inviscid_polar","category":"page"},{"location":"tutorial/#FLOWFoil.inviscid_polar","page":"Quick Start","title":"FLOWFoil.inviscid_polar","text":"inviscid_polar(inviscid_solution, angleofattack; cascade=false)\n\nGenerate Polar object for inviscid system at given angle of attack.\n\nArguements:\n\ninviscid_solution::InviscidSolution : Inviscid Solution object\nangleofattack::Float : Angle of attack, in degrees\n\n\n\n\n\n","category":"function"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- POST PROCESS SOLUTION\n# arbitrarily pick an angle of attack\nalpha = 4.0\npolar = FLOWFoil.inviscid_polar(inviscid_solution, alpha)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Comparing our solution to the analytic solution we saved earlier, we see excellent agreement.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"","category":"page"},{"location":"tutorial/#Multiple-Airfoil-Inviscid-Solution","page":"Quick Start","title":"Multiple Airfoil Inviscid Solution","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"For a multi-element airfoil system, the procedure is identical, except an array of meshes is used for the problem definition. For this case, we'll use data that comes from \"An Exact Test Case for the Plane Potential Flow About Two Adjacent Lifting Aerofoils\" by B. R. Williams.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\nusing PyPlot\n\n## -- SET UP GEOMETRY\ninclude(\"two_inviscid_airfoils.jl\")\n\n# set freestream to unity\nvinf = 1.0\nre = 1.0\n\n# arbitrarily pick an angle of attack\nalpha = 0.0\n\n# generate mesh object\nmeshes = [FLOWFoil.generate_mesh([ximain etamain]); FLOWFoil.generate_mesh([xiflap etaflap])]\n\n## -- DEFINE PROBLEM\nproblem = FLOWFoil.Problem(meshes; viscous=false)\n\n## -- SOLVE PROBLEM\ninviscid_solution = FLOWFoil.solve(problem)\n\n## -- POST PROCESS SOLUTION\npolar = FLOWFoil.inviscid_polar(inviscid_solution, alpha)\n","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Again, we see excellent agreement with the analytical solution.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"","category":"page"},{"location":"tutorial/#Axisymmetric-Body-of-Revolution","page":"Quick Start","title":"Axisymmetric Body of Revolution","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil can also handle axisymmetric cases, including bodies of revolution which we domonstrate here.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\nusing PyPlot\n\ninclude(\"../../test/data/bodyofrevolutioncoords.jl\")\nnothing #hide","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"To let the problem and solver know that you are modeling an axisymmetric system, generate your meshes using the generate_axisym_mesh function. In addition, if you are modeling a body of revolution, that is, you have an open geometry at the axis of rotation, use the bodyofrevolution keyword argument.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.generate_axisym_mesh\nFLOWFoil.AxiSymMesh","category":"page"},{"location":"tutorial/#FLOWFoil.generate_axisym_mesh","page":"Quick Start","title":"FLOWFoil.generate_axisym_mesh","text":"generate_axisym_mesh(x, r; bodyofrevolution)\n\nGenerate mesh for axisymmetric body.\n\nArguments:\n\nx::Array{Float} : x-coordinates of geometry\nr::Array{Float} : r-coordinates of geometry\n\nKeyword Arguments:\n\nbodyofrevolution::Bool : flag whether body is a body of revolution (default=true)\n\nReturns:\n\nmesh::FLOWFoil.AxiSymMesh : axisymmetric mesh object\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#FLOWFoil.AxiSymMesh","page":"Quick Start","title":"FLOWFoil.AxiSymMesh","text":"AxiSymMesh{TP,TB}\n\nAxisymmetric Mesh Object\n\nFields:\n\npanels::FLOWFoil.AxiSymPanel : panel objects describing surface geometry.\nbodyofrevolution::Bool : Flag as to whether or not the mesh represents a body of revolution.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"mesh = [FLOWFoil.generate_axisym_mesh(x, r; bodyofrevolution=true)]","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"You will also need to set the axisymmetric keyword argument to true in your problem definition.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"problem = FLOWFoil.Problem(mesh; axisymmetric=true, viscous=false)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"The solver function will know from the problem object which solver to use, and in this case will output a solution of type InviscidSolution as with the 2D cases.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"solution = FLOWFoil.solve(problem)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Finally, we can get the solution and plot the results","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"\n# get surface velocity at control points\ncpx = [mesh[1].panels[i].controlpoint[1] for i in 1:length(solution.panelgammas)]\nsurface_velocity = solution.panelgammas\nnothing #hide","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"","category":"page"},{"location":"tutorial/#Axisymmetric-Annular-Airfoil-(Duct)","page":"Quick Start","title":"Axisymmetric Annular Airfoil (Duct)","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"If we define an airfoil shape in an axisymmetric scheme, we model an annular airfoil, or in other words, a duct.  To do so, we follow a similar procedure to bodies of revolution with the exception that we set bodyofrevolution=false.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\nusing PyPlot\n\ninclude(\"../../test/data/naca_662-015.jl\")\n\n#Set bodyofrevolution to false\nmesh = [FLOWFoil.generate_axisym_mesh(x, r, bodyofrevolution=false)]\n\nproblem = FLOWFoil.Problem(mesh; axisymmetric=true, viscous=false)\n\nsolution = FLOWFoil.solve(problem)\n\n# get surface velocity at control points\ncpx = [mesh[1].panels[i].controlpoint[1] for i in 1:length(solution.panelgammas)]\n\n#note that the gamma values on the panels are equivalent to the surface velocity\ncp = 1.0 .- solution.panelgammas .^ 2","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"As above, we plot experimental results along with our calculated values.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"","category":"page"},{"location":"tutorial/#Axisymmetric-Mutli-element-Systems","page":"Quick Start","title":"Axisymmetric Mutli-element Systems","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"As an example of an multi-element axisymmetric system (such as that used for a ducted rotor), we will simply combine the two previous cases. We proceed in the same manner for 2D, planar multi-element systems in that we simply put the various mesh objects in an array when defining the problem object.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\n\n# create annular airfoil mesh object\ninclude(\"../../test/data/naca_662-015.jl\")\nduct = FLOWFoil.generate_axisym_mesh(x, r; bodyofrevolution=false)\n\n# create body of revolution mesh object\ninclude(\"../../test/data/bodyofrevolutioncoords.jl\")\nhub = FLOWFoil.generate_axisym_mesh(x, r; bodyofrevolution=true)\n\n# define problem with both mesh objects\nproblem = FLOWFoil.Problem([duct; hub]; axisymmetric=true, viscous=false)\n\nsolution = FLOWFoil.solve(problem)\n\n# Post Processing\n\n# get surface velocity at control points\ncpx = [(p -> p.controlpoint[1]).(duct.panels); (p -> p.controlpoint[1]).(hub.panels)]\n\n#surface velocities\ngammas = solution.panelgammas\n\n# surface_velocity = FLOWFoil.axisymmetric_surface_pressure(solution)\ncp = 1.0 .- gammas .^ 2","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Plotting the geometry and the output velocities and pressures show expected behavior when combining these two cases.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"}]
}
