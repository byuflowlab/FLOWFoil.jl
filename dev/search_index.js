var documenterSearchIndex = {"docs":
[{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"CurrentModule = FLOWFoil","category":"page"},{"location":"#FLOWFoil","page":"Intro","title":"FLOWFoil","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"FLOWFoil is a two dimensional potential flow solver (panel method) for airfoils and airfoil systems. The formulation used for FLOWFoil follows closely those of XFoil and mfoil (see also references below).","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"Currently, FLOWFoil only has inviscid capabilties for single and multi-element airfoils. Future additions will include visous capabilties for both single and multi-element airfoils as well.","category":"page"},{"location":"#References:","page":"Intro","title":"References:","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"Drela, M., “XFOIL: An Analysis and Design System for Low Reynolds Number Airfoils,” 1989.\nFidkowski, K. J., “A Coupled Inviscid-Viscous Airfoil Analysis Solver, Revisited,” AIAA Journal, 2021.","category":"page"},{"location":"tutorial/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil is structured as follows:","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"The user generates a Problem.\nThe Problem is solved, generating a Solution.\nThe Solution is post-processed, generating a Polar.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"There are also some included convenience functions for geometry generation and manipulation.","category":"page"},{"location":"tutorial/#Single-Airfoil-Inviscid-Solution","page":"Quick Start","title":"Single Airfoil Inviscid Solution","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Let's first look at the simplest case, a single inviscid airfoil. We'll first set up the geometry, then define the problem, then solve the problem, then post process it, and finally plot some of the outputs.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\nusing PyPlot","category":"page"},{"location":"tutorial/#Geometry-Definition","page":"Quick Start","title":"Geometry Definition","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"For this example, we'll use one of the airfoil parameterization convenience functions to generate the x,z coordinates of an arbitrary Joukowsky airfoil. FLOWFoil includes several such convenience functions, which you can find more information on the API Reference page.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- SET UP GEOMETRY\n\n# arbitrarily pick some joukowsky airfoil parameters\ncenter = [-0.1; 0.1]\nradius = 1.0\nnum_nodes = 160\n\n# get airfoil coordinates for joukowsky airfoil\nx, z = FLOWFoil.joukowsky(center, radius; N=num_nodes)\n\n# get analytic joukowsky solution for later, using alpha=4 and vinf = 1.0\nvj, cpj, clj = FLOWFoil.joukowskyflow(center, radius, 4.0, 1.0; N=num_nodes)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"note: Note\nFor any airfoil coordinate generation method (from FLOWFoil or otherwise), the coordinates must start at the trailing edge, and proceed clockwise around the airfoil.","category":"page"},{"location":"tutorial/#Generate-Meshes","page":"Quick Start","title":"Generate Meshes","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"We'll next take that geometry and create a simple mesh object that holds the coordinates as well as pertinent information regarding the trailing edge.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.generate_mesh","category":"page"},{"location":"tutorial/#FLOWFoil.generate_mesh","page":"Quick Start","title":"FLOWFoil.generate_mesh","text":"generatemesh(x, y; chordlength, wakelength)\n\nCreate panels from input geometry coordinates.\n\nArguments:\n\nx::Vector{Float} : x coordinates defining airfoil geometry.\ny::Vector{Float} : y coordinates defining airfoil geometry.\n\nKeyword Arguments:\n\ngaptolerance::Float : Tolerance for how close, relative to the chord, the trailing edge nodes can be before being considered a sharp trailing edge. (default = 1e-10)\n\nReturns\n\nmesh::BodyMesh : Geometry mesh, including panel nodes and trailing edge condition.\n\n\n\n\n\ngenerate_mesh(coordinates; kwargs)\n\nIdentical to implementation with x and y separate, but here with x,y coordinates together in a single array [X Y].\n\nArguments:\n\ncoordinates::Array{Float,2} : array of both x and y coordinates (x first column, y second column).\n\n\n\n\n\n","category":"function"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"# generate mesh object\nmeshes = [FLOWFoil.generate_mesh([x z])]","category":"page"},{"location":"tutorial/#Define-Problem","page":"Quick Start","title":"Define Problem","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"We'll define a problem using the mesh array we just created, and indicate that we want to solve the inviscid problem by setting the viscous keyword argument to false. The problem object is very simple in the inviscid case, but carries more information about the freestream for the viscous problem (not yet implemented)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.Problem(meshes, angleofattack=0.0, reynolds=0.0, mach=0.0; viscous=true, verbose=false, debug=false)","category":"page"},{"location":"tutorial/#FLOWFoil.Problem","page":"Quick Start","title":"FLOWFoil.Problem","text":"Problem(meshes, angleofattack=0.0, reynolds=0.0, mach=0.0; viscous=true, verbose=false, debug=false)\n\nConstructor for Problem Objects.\n\nArguments:\n\nmeshes::Array{BodyMesh} : Array of mesh objects\nangleofattack::Float : Angle of Attack (currently unused)\nreynolds::Float : Reynolds Number (currently unused)\nmach::Float : Mach Number (currently unused)\n\nKeyword Arguments:\n\nviscous::Bool : Flag to solve viscous or inviscid only\nverbose::Bool : Flag to print out verbose statements\ndebug::Bool : Flag to save the system structs, etc.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- DEFINE PROBLEM\nproblem = FLOWFoil.Problem(meshes; viscous=false)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"note: Note\nEven for single mesh objects, the meshes argument provided to the Problem constructor needs to be in an array.","category":"page"},{"location":"tutorial/#Solve-Problem","page":"Quick Start","title":"Solve Problem","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"To solve the problem, we simply call the solve function, which will select the appropriate solver based on the viscous field in the problem. The solver returns a solution object, which nominally contains the vortex strengths and constant freestream strength on each node, as well as the mesh objects used in the solution, and some book keeping items from multi-element analyses.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.solve","category":"page"},{"location":"tutorial/#FLOWFoil.solve","page":"Quick Start","title":"FLOWFoil.solve","text":"solve(problem)\n\nSolve problem defined by the input Problem object and return the solution in a Solution object.\n\nArguments:\n\nproblem::Problem : Problem to solve\n\nReturns:\n\nsolution::{InviscidSolution or ViscousSolution} : returns solution of type matching viscous flag in problem.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- SOLVE PROBLEM\ninviscid_solution = FLOWFoil.solve(problem)","category":"page"},{"location":"tutorial/#Post-Process","page":"Quick Start","title":"Post Process","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"With the solution calculated, we can post process by providing the angle of attack at which we want to know the various airfoil coefficients includeing lift and moment, as well as surface velocity and pressure distributions.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"FLOWFoil.inviscid_polar","category":"page"},{"location":"tutorial/#FLOWFoil.inviscid_polar","page":"Quick Start","title":"FLOWFoil.inviscid_polar","text":"inviscid_polar(inviscid_solution, angleofattack; cascade=false)\n\nGenerate Polar object for inviscid system at given angle of attack.\n\nArguements:\n\ninviscid_solution::InviscidSolution : Inviscid Solution object\nangleofattack::Float : Angle of attack, in degrees\n\n\n\n\n\n","category":"function"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"## -- POST PROCESS SOLUTION\n# arbitrarily pick an angle of attack\nalpha = 4.0\npolar = FLOWFoil.inviscid_polar(inviscid_solution, alpha)","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Comparing our solution to the analytic solution we saved earlier, we see excellent agreement.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"tutorial/#Multiple-Airfoil-Inviscid-Solution","page":"Quick Start","title":"Multiple Airfoil Inviscid Solution","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"For a multi-element airfoil system, the procedure is identical, except an array of meshes is used for the problem definition. For this case, we'll use data that comes from \"An Exact Test Case for the Plane Potential Flow About Two Adjacent Lifting Aerofoils\" by B. R. Williams.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"using FLOWFoil\nusing PyPlot\n\n## -- SET UP GEOMETRY\ninclude(\"two_inviscid_airfoils.jl\")\n\n# set freestream to unity\nvinf = 1.0\nre = 1.0\n\n# arbitrarily pick an angle of attack\nalpha = 0.0\n\n# generate mesh object\nmeshes = [FLOWFoil.generate_mesh([ximain etamain]); FLOWFoil.generate_mesh([xiflap etaflap])]\n\n## -- DEFINE PROBLEM\nproblem = FLOWFoil.Problem(meshes; viscous=false)\n\n## -- SOLVE PROBLEM\ninviscid_solution = FLOWFoil.solve(problem)\n\n## -- POST PROCESS SOLUTION\npolar = FLOWFoil.inviscid_polar(inviscid_solution, alpha)\n","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"Again, we see excellent agreement with the analytical solution.","category":"page"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"}]
}
