var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FLOWFoil","category":"page"},{"location":"#FLOWFoil","page":"Home","title":"FLOWFoil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FLOWFoil.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FLOWFoil]","category":"page"},{"location":"#FLOWFoil.Freestream","page":"Home","title":"FLOWFoil.Freestream","text":"Freestream{TF}\n\nFreestream Definition.\n\nFields:\n\n'reynolds::Vector{Float}' : Reynolds Numbers\n'density::Vector{Float}' : air density\n'dynamicviscosity::Vector{Float}' : air dynamic viscosity\n'mach::Vector{Float}' : Mach Numbers\n'angleofattack::Vector{Float}' : Angles of attack in degrees\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Mesh","page":"Home","title":"FLOWFoil.Mesh","text":"Mesh{TF}\n\nMesh for single body.\n\nFields:\n\n'airfoil_nodes::Array{Array{Float,2}}' : [x y] node (panel edge) locations for airfoil\n'wake_nodes::Array{Array{Float,2}}' : [x y] node (panel edge) locations for wake\n'wake_midpoints::Array{Array{Float,2}}' : [x y] wake panel midpoint locations\n'blunt_te::Bool' : boolean for whether or not the trailing edge is blunt or not.\n\nAssuptions:\n\nx and y coordinates start at the bottom trailing edge and proceed clockwise.\nx and y coordinates are normalized such that the airfoil has chord length 1.0.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.MeshSystem","page":"Home","title":"FLOWFoil.MeshSystem","text":"MeshSystem{TF}\n\nSystem of meshes to solve.\n\nFields:\n\n'meshes::Array{Mesh}' : Array of mesh objects.\n'scales::Vector{Float}' : Airfoil scaling factors.\n'angles::Vector{Float}' : Airfoil angles of attack.\n'locations::Array{Array{TF}}' : Array of leading edge locations.\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Parameters","page":"Home","title":"FLOWFoil.Parameters","text":"Parameters{TF}\n\n`gamma_air::Float' : ratio of specific heats for air\n`eta_crit::Float' : critical amplification factor\n`eta_D::Float' : wall/wake dissipation length ratio\n`GA::Float' : G - Beta locus A constant\n`GB::Float' : G - Beta locus B constant\n`GC::Float' : G - Beta locus C constant\n`Klag::Float' : shear lag constant\n`Ctau::Float' : shear stress initialization constant\n`Etau::Float' : shear stree initialization exponent\n`rSu::Float' : Sutherland temperature ratio\n`fw::Float' : wake gap continuation factor\n`dw::Float' : wake length, in airfoil chords\n`epsilonw::Float' : first wake point offset, in airfoil chords\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Problem","page":"Home","title":"FLOWFoil.Problem","text":"Problem{TM,TS,TB}\n\nProblem definition and method selection.\n\nFields:\n\n'meshsystem::MeshSystem' : Mesh System to solve\n'freestream::FreeStream' : Freestream parameters\n'viscous::Bool' : Flag to solve viscous or inviscid only\n'verbose::Bool' : Flag to print out verbose statements\n'debug::Bool' : Flag to print out debugging statements\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.Solution","page":"Home","title":"FLOWFoil.Solution","text":"Solution{TM,TF}\n\nOutput object containing solution and useful items.\n\nFields:\n\n'meshsystem::MeshSystem' : Mesh System used in solution (potentially modified from input meshes).\n'strengthsvec::Array{Float,2}' : singularity strengths.\n'vcoeffmat::Array{Float,2}' : Vortex Coefficient Matrix used in solution.\n'scoeffmat::Array{Float,2}' : Source Coefficient Matrix used in solution.\n'bccoeffvec::Vector{Float}' : Boundary Coefficient Vector used in solution.\n'lift::Vector{Float}' : Lift Coefficients.\n'drag::Vector{Float}' : Total Drag Coefficients.\n'pdrag::Vector{Float}' : Pressure Drag Coefficients.\n'idrag::Vector{Float}' : Induced Drag Coefficients.\n'moment::Vector{Float}' : Moment Coefficients.\n'surfacevelocity::Vector{Float}' : surface velocity distribution\n'surfacepressure::Vector{Float}' : surface pressure distribution\n\n\n\n\n\n","category":"type"},{"location":"#FLOWFoil.assembleboundaryconditions-Tuple{Any}","page":"Home","title":"FLOWFoil.assembleboundaryconditions","text":"assembleboundaryconditions(meshsystem, freestream)\n\nAssemble boundary condition vector.\n\nNote that multiple operation conditions is not yet supported. If freestream fields contain more than one item, only the first will be used.\n\nArguments:\n\n'meshsystem::MeshSystem' : mesh system for which to solve\n'freestream::Freestream' : freestream parameters\n\nReturns\n\noutput::type : description.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.assemblematrixa-Tuple{Any}","page":"Home","title":"FLOWFoil.assemblematrixa","text":"assemblematrixa(meshsystem)\n\nAssemble vortex coefficient matrix with full N+1 x N+1 system, including Kutta condition.\n\nArguments:\n\n'meshsystem:MeshSystem' : Mesh System for which to solve.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.assemblevortexcoefficients-Tuple{Any}","page":"Home","title":"FLOWFoil.assemblevortexcoefficients","text":"assemblevortexcoefficients(meshsystem)\n\nAssemble matrix of vortex strength coefficients.\n\nThis function only assembles the NxN portion of the influence coefficient matrix. It does not include the kutta condition. Also note that multibody capabilities have not yet been implemented.\n\nArguments:\n\n'meshsystem::MeshSystem' : mesh system for which to find influence coefficient matrix.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.camber-Tuple{Float64, Number, Number}","page":"Home","title":"FLOWFoil.camber","text":"camber(x::Float64, maxcamber::Number, camberpose::Number)\n\nCompute camber at a given chord-normalized x-position by NACA 4-series camber equations.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.defaultparameters-Tuple{}","page":"Home","title":"FLOWFoil.defaultparameters","text":"defaultparameters()\n\nInitializes Parameters struct with defaults, see Parameters docstring.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.generatemesh-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.generatemesh","text":"generatemesh(x, y; chordlength, wakelength)\n\nCreate panels from input geometry coordinates.\n\nArguments:\n\n'x::Vector{Float}' : x coordinates defining airfoil geometry.\n'y::Vector{Float}' : y coordinates defining airfoil geometry.\n\nKeyword Arguments:\n\nchordlength::Float' : length of chord (default = 1)\nwakelength::Float' : length of wake relative to chord (default = 1)\n\nReturns\n\nmesh::Mesh : Geometry mesh, including panel nodes, wake nodes, and trailing edge condition.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_a-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_a","text":"get_a(r1, d, dmag)\n\nCalculate distance from panel to evalulation point in the panel tangent direction.\n\nArguments:\n\n'r1::Vector{Float}' : vector from node1 to evalulation point.\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length  get_a(rmag1, dmag, theta1)\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_d-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_d","text":"get_d(node1, node2)\n\nCalculate panel length (between adjacent nodes).\n\nArguments:\n\n'node1::Array{Float}(2)' : [x y] location of first node\n'node2::Array{Float}(2)' : [x y] location of second node\n\nReturns\n\n'd::Vector{Float}' : vector from node1 to node2\n'dmag::Float' : length of panel between node1 and node2\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_distances-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_distances","text":"get_distances(node1, node2, point)\n\nGet vectors and magnitudes for panel and between nodes and validation points.\n\nArguments:\n\n'node1::Array{Float}' : [x y] position of node1.\n'node2::Array{Float}' : [x y] position of node2.\n'point::Array{Float}' : [x y] position of evaluation point.\n\nReturns:\n\n'r1::Vector{Float}' : vector from node1 to evaluation point.\n'r1mag::Float' : distance from node1 to evaluation point.\n'r2::Vector{Float}' : vector from node2 to evaluation point.\n'r2mag::Float' : distance from node2 to evaluation point.\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_h-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_h","text":"get_h(r1, d, dmag)\n\nCalculate distance from panel to evalulation point in the panel normal direction.\n\nArguments:\n\n'r1::Vector{Float}' : vector from node1 to evalulation point.\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_normal-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_normal","text":"get_normal(d, dmag)\n\nGet unit normal to panel.\n\nArguments:\n\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_orientation-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_orientation","text":"get_orientation(node1, node2, point)\n\nGet angles between panel and evaluation point, ln of distances from nodes to evaluation point, and evaluation point position relative to panel.\n\nArguments:\n\n'node1::Array{Float}' : [x y] position of node1.\n'node2::Array{Float}' : [x y] position of node2.\n'point::Array{Float}' : [x y] position of evaluation point.\n\nReturns:\n\n'theta1::Float' : Angle between panel and evaluation point, centered at node1.\n'theta2::Float' : Angle between panel and evaluation point, centered at node2.\n'ln1::Float' : Natural log of distance from node1 to evaluation point.\n'ln2::Float' : Natural log of distance from node2 to evaluation point.\n'h::Float' : Distance from panel to evaluation in panel normal direction.\n'a::Float' : Distance from node1 to evaluation in panel tangent direction.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psibargamma-NTuple{7, Any}","page":"Home","title":"FLOWFoil.get_psibargamma","text":"get_psibargamma(theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  overbarPsi^gamma\n\nArguments:\n\n'theta1::Float' : angle between panel and vector from node1 to evaluation point\n'theta2::Float' : angle between panel and vector from node2 to evaluation point\n'ln1::Float' : value of ln(rmag1), which may be that or 0.0, depening on evaluation point location\n'ln2::Float' : value of ln(rmag2), which may be that or 0.0, depening on evaluation point location\n'dmag::Float' : panel length\n'h::Float' : height of right triangle with hypontenuse, r1, and base, a, colinear with panel.\n'a::Float' : length of base of right triangle with height, h, and hypontenuse, r1.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psibarsigma-NTuple{7, Any}","page":"Home","title":"FLOWFoil.get_psibarsigma","text":"get_psibarsigma(theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  overbarPsi^sigma\n\nArguments:\n\n'theta1::Float' : Angle between panel and evaluation point, centered at node1.\n'theta2::Float' : Angle between panel and evaluation point, centered at node2.\n'ln1::Float' : Natural log of distance from node1 to evaluation point.\n'ln2::Float' : Natural log of distance from node2 to evaluation point.\n'h::Float' : Distance from panel to evaluation in panel normal direction.\n'a::Float' : Distance from node1 to evaluation in panel tangent direction.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psitildegamma-NTuple{10, Any}","page":"Home","title":"FLOWFoil.get_psitildegamma","text":"get_psitildegamma(psibargamma, r1mag, r2mag, theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  widetildePsi^gamma\n\nArguments:\n\n'psibargamma::Float' : value of overbarPsi^gamma\n'r1mag::Float' : distance from node1 to evaluation point\n'r2mag::Float' : distance from node2 to evaluation point\n'theta1::Float' : angle between panel and vector from node1 to evaluation point\n'theta2::Float' : angle between panel and vector from node2 to evaluation point\n'ln1::Float' : value of ln(rmag1), which may be that or 0.0, depening on evaluation point location\n'ln2::Float' : value of ln(rmag2), which may be that or 0.0, depening on evaluation point location\n'dmag::Float' : panel length\n'h::Float' : height of right triangle with hypontenuse, r1, and base, a, colinear with panel.\n'a::Float' : length of base of right triangle with height, h, and hypontenuse, r1.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_psitildesigma-NTuple{8, Any}","page":"Home","title":"FLOWFoil.get_psitildesigma","text":"get_psitildesigma(psibargamma, r1mag, r2mag, theta1, theta2, ln1, ln2, dmag, h, a)\n\nCalculate value of  widetildePsi^sigma\n\nArguments:\n\n'psibargamma::Float' : value of overbarPsi^gamma\n'r1mag::Float' : distance from node1 to evaluation point\n'r2mag::Float' : distance from node2 to evaluation point\n'theta1::Float' : angle between panel and vector from node1 to evaluation point\n'theta2::Float' : angle between panel and vector from node2 to evaluation point\n'dmag::Float' : panel length\n'h::Float' : height of right triangle with hypontenuse, r1, and base, a, colinear with panel.\n'a::Float' : length of base of right triangle with height, h, and hypontenuse, r1.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_r-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_r","text":"function get_r(node,point)\n\nCalculate the vector, mathbfr, and distance, r, from the node to the evaluation point\n\nArguments:\n\nnode::Array{Float} : [x y] position of node\npoint::Array{Float} : [x y] position of point.\n\nReturns\n\n'r::Vector{Float}' : vector from node to evaluation point\n'rmag::Float' : length of panel between node and evaluation point\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_source_influence-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_source_influence","text":"get_source_influence(node1, node2, point)\n\nCalculate source influence coefficients on the evaluation point from the panel between node1 and node2.\n\nArguments:\n\n'node1::Array{Float}(2)' : [x y] location of node1\n'node2::Array{Float}(2)' : [x y] location of node2\n'point::Array{Float}(2)' : [x y] location of evaluation point\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_tangent-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_tangent","text":"get_tangent(d, dmag)\n\nGet unit tangent to panel.\n\nArguments:\n\n'd::Vector{Float}' : vector from node1 to node2.\n'dmag::Float' : panel length\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_theta-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_theta","text":"get_theta(h, a, dmag)\n\nGet angle (in radians) between panel and vector from node2 to evaluation point.\n\nArguments:\n\n'h::Float' : Distance, normal to panel, between panel and evaluation point.\n'a::Float' : Distance, tangent to panel, between node1 and evaluation point.\n'dmag::Float' : Panel lentgh.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_theta-Tuple{Any, Any}","page":"Home","title":"FLOWFoil.get_theta","text":"get_theta(h, a)\n\nGet angle (in radians) between panel and vector from node1 to evaluation point.\n\nArguments:\n\n'h::Float' : Distance, normal to panel, between panel and evaluation point.\n'a::Float' : Distance, tangent to panel, between node1 and evaluation point.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.get_vortex_influence-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.get_vortex_influence","text":"get_vortex_influence(node1, node2, point)\n\nCalculate vortex influence coefficients on the evaluation point from the panel between node1 and node2.\n\nArguments:\n\n'node1::Array{Float}(2)' : [x y] location of node1\n'node2::Array{Float}(2)' : [x y] location of node2\n'point::Array{Float}(2)' : [x y] location of evaluation point\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.initalize_viscous-Tuple{Any}","page":"Home","title":"FLOWFoil.initalize_viscous","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.joukowsky","page":"Home","title":"FLOWFoil.joukowsky","text":"joukowsky(center::Array{Float64}=[-0.1 0.1] ; N::Int=360)\n\nCalculate the unit Joukowsky Airfoil based on a cylinder's center point.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.karmantrefftz","page":"Home","title":"FLOWFoil.karmantrefftz","text":"karmantrefftz(center::Array{Float64}=[-0.1 0.1], wedge::Float64=0.0;N::Int=360)\n\nCalculate geometry of Karman-Trefftz airfoil based on the center point of a cylinder and a wedge angle.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.naca4","page":"Home","title":"FLOWFoil.naca4","text":"naca4(c::Number=2.0, p::Number=4.0, t::Number=12.0, N::Int=100;bluntTE::Bool=false)\n\nCompute x, y airfoil coordinates for N nodes, based on NACA 4-Series Parameterization.\n\nx, y-upper, and y-lower coordinates are output. All have both leading and trailing edge points.\n\nkeyword argument: bluntTE=false (default) controls whether the blunt or sharp trailing edge formulation is used.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.rawjoukowsky","page":"Home","title":"FLOWFoil.rawjoukowsky","text":"rawjoukowsky(center::Array{Float64}=[-0.1 0.1] ; N::Int=360)\n\nCalculate geometry of Joukowsky Airfoil based on a cylinder's center point.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.rawkarmantrefftz","page":"Home","title":"FLOWFoil.rawkarmantrefftz","text":"rawkarmanTrefftzFoil(center::Array{Float64}=[-0.1 0.1], wedge::Float64=0.0;N::Int=360)\n\nCalculate geometry of Karman-Trefftz airfoil based on the center point of a cylinder and a wedge angle.\n\n\n\n\n\n","category":"function"},{"location":"#FLOWFoil.sizesystem-Tuple{Any}","page":"Home","title":"FLOWFoil.sizesystem","text":"sizesystem(meshsystem)\n\nCount size of inviscid system matrix.\n\nArguments:\n\n'meshsystem::MeshSystem' : The system for which to calculate the linear system size.\n\n\n\n\n\n","category":"method"},{"location":"#FLOWFoil.solve-Tuple{Any}","page":"Home","title":"FLOWFoil.solve","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.solve_inviscid-Tuple{Any}","page":"Home","title":"FLOWFoil.solve_inviscid","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.solve_inviscid_system-Tuple{Any, Any, Any}","page":"Home","title":"FLOWFoil.solve_inviscid_system","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.solve_viscous-Tuple{Any}","page":"Home","title":"FLOWFoil.solve_viscous","text":"\n\n\n\n","category":"method"},{"location":"#FLOWFoil.thickness-Tuple{Float64, Number}","page":"Home","title":"FLOWFoil.thickness","text":"thickness(x::Float64, maxthick::Number; bluntTE::Bool=false)\n\nCompute thickness at a given chord-normalized x-position by NACA 4-series thickness equations.\n\n\n\n\n\n","category":"method"}]
}
